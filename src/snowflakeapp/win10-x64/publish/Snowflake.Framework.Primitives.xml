<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Snowflake.Framework.Primitives</name>
    </assembly>
    <members>
        <member name="T:Snowflake.Caching.IKeyedImageCache">
            <summary>
            Represents a set-and-forget keyed image cache on a record guid.
            </summary>
        </member>
        <member name="M:Snowflake.Caching.IKeyedImageCache.Add(System.IO.Stream,System.Guid,System.String)">
            <summary>
            Adds an image to the image cache, generating resized image/jpeg versions of the files, and
            returning a list of file records.
            </summary>
            <param name="imageStream">The image to add as a stream</param>
            <param name="recordGuid">A record to link to</param>
            <param name="imageType">The type of image See <see cref="T:Snowflake.Caching.ImageTypes"/> for recognized image types</param>
            <returns>The generated file records with appropriate metadata linking it to the cache folder</returns>
        </member>
        <member name="M:Snowflake.Caching.IKeyedImageCache.Add(System.IO.Stream,System.Guid,System.String,System.DateTime)">
            <summary>
            Adds an image to the image cache, generating resized image/jpeg versions of the files, and
            returning a list of file records.
            </summary>
            <param name="imageStream">The image to add as a stream</param>
            <param name="recordGuid">A record to link to</param>
            <param name="imageType">The type of image See <see cref="T:Snowflake.Caching.ImageTypes"/> for recognized image types</param>
            <param name="dateTime">A date time to link it to.</param>
            <returns>The generated file records with appropriate metadata linking it to the cache folder</returns>
        </member>
        <member name="T:Snowflake.Caching.ImageMetadataKeys">
            <summary>
            The image metadata key
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageMetadataKeys.Date">
            <summary>
            The image date
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageMetadataKeys.Type">
            <summary>
            The image type
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageMetadataKeys.Scale">
            <summary>
            The scale of the image
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageMetadataKeys.CacheId">
            <summary>
            The image cache id if available.
            </summary>
        </member>
        <member name="T:Snowflake.Caching.ImageTypes">
            <summary>
            Standard types of images.
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageTypes.MediaBoxartFront">
            <summary>
            Front box art
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageTypes.MediaBoxartBack">
            <summary>
            Back box art
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageTypes.MediaManualPage">
            <summary>
            Manual page
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageTypes.MediaIcon">
            <summary>
            Game icon
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageTypes.MediaPromotional">
            <summary>
            Promotional material, such as promotional screenshots, advertisements, etc.
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageTypes.MediaLogo">
            <summary>
            Game logoes
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageTypes.MediaMarquee">
            <summary>
            An arcade cabinet marquee
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageTypes.Screenshot">
            <summary>
            A game screenshot
            </summary>
        </member>
        <member name="F:Snowflake.Caching.ImageTypes.Generic">
            <summary>
            A generic image
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Attributes.ConfigurationFileAttribute">
            <summary>
            Defines an alias to an output configuration file for a given configuration collection.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationFileAttribute.Key">
            <summary>
            Gets the key with which the section properties of the collection will refer to this output.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationFileAttribute.FileName">
            <summary>
            Gets the filename that the section properties of the collection will output to.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationFileAttribute.TrueMapping">
            <summary>
            Gets the boolean mapping for this file for true
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationFileAttribute.FalseMapping">
            <summary>
            Gets the boolean mapping fo
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.Attributes.ConfigurationFileAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Configuration.Attributes.ConfigurationFileAttribute"/> class.
            Defines an alias to an output configuration file for a given configuration collection.
            </summary>
            <param name="key">The key with which the section properties of the collection will refer to this output.</param>
            <param name="filename"> The filename that the section properties of the collection will output to.</param>
            <param name="trueMapping">The string that true maps to in the configuration file.</param>
            <param name="falseMapping">The string that false maps to in the configuration file.</param>
        </member>
        <member name="T:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute">
            <summary>
            Represents one option in an emulator configuration inside a configuration section.
            Typically configuration options must be a double, bool, integer or an enum value in order to be safe,
            type information may be lost when serializing into a wire format.
            </summary>
            <see cref="T:Snowflake.Configuration.IConfigurationSection"></see>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.DisplayName">
            <summary>
            Gets or sets the display name for human readable purposes of this option
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.Description">
            <summary>
            Gets or sets a description of this configuration option
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.Simple">
            <summary>
            Gets or sets a value indicating whether whether or not this option is a simple option (displayed in "Simple" configuration mode)
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.Private">
            <summary>
            Gets or sets a value indicating whether whether or not this option is private (not ever displayed to the user)
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.Flag">
            <summary>
            Gets or sets a value indicating whether a 'flag' property is never serialized into the configuration option, and is instead used to cause
            side effects to the configuration during emulator instance creation by the emulator handler.
            If a flag affects the configuration, it should be placed in the same section it modifies.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.Max">
            <summary>
            Gets or sets the maximum value allowable for a number value
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.Min">
            <summary>
            Gets or sets the minimum value allowable for a number value
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.Increment">
            <summary>
            Gets or sets the increment to increase a numerical value by
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.IsPath">
            <summary>
            Gets or sets a value indicating whether whether or not this string is a file path.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.OptionName">
            <summary>
            Gets the name of the option as it appears inside the emulator configuration
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.Default">
            <summary>
            Gets the default value of this option.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.Type">
            <summary>
            Gets the CLR type of this option.
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute"/> class.
            Represents one option in an emulator configuration inside a configuration section.
            Typically configuration options must be a double, bool, integer or an enum value in order to be safe,
            type information may be lost when serializing into a wire format.
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute"/> class.
            Represents one option in an emulator configuration inside a configuration section.
            Typically configuration options must be a double, bool, integer or an enum value in order to be safe,
            type information may be lost when serializing into a wire format.
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute"/> class.
            Represents one option in an emulator configuration inside a configuration section.
            Typically configuration options must be a double, bool, integer or an enum value in order to be safe,
            type information may be lost when serializing into a wire format.
            </summary>
            <param name="optionName">The name of the option</param>
            <param name="default">The default value of the option. Note that only strings, enums and primitive types are supported.</param>
        </member>
        <member name="M:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute"/> class.
            Represents one option in an emulator configuration inside a configuration section.
            Typically configuration options must be a double, bool, integer or an enum value in order to be safe,
            type information may be lost when serializing into a wire format.
            </summary>
            <param name="optionName">The name of the option</param>
            <param name="default">The default value of the option. Note that only strings, enums and primitive types are supported.</param>
        </member>
        <member name="M:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute"/> class.
            Represents one option in an emulator configuration inside a configuration section.
            Typically configuration options must be a double, bool, integer or an enum value in order to be safe,
            type information may be lost when serializing into a wire format.
            </summary>
            <param name="optionName">The name of the option</param>
            <param name="default">The default value of the option. Note that only strings, enums and primitive types are supported.</param>
        </member>
        <member name="T:Snowflake.Configuration.Attributes.ConfigurationSectionAttribute">
            <summary>
            Marks an interface as a configuration section that is serializable into valid configuration.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationSectionAttribute.SectionName">
            <summary>
            Gets the name of the section as it appears in configuration
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationSectionAttribute.Description">
            <summary>
            Gets or sets the description of the section.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.ConfigurationSectionAttribute.DisplayName">
            <summary>
            Gets the human readable user-facing name of the section.
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.Attributes.ConfigurationSectionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Configuration.Attributes.ConfigurationSectionAttribute"/> class.
            Marks an interface as a configuration section that is serializable into valid configuration.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Attributes.CustomMetadataAttribute">
            <summary>
            Represents a custom metadata on a selection option or a configuration property.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.CustomMetadataAttribute.Key">
            <summary>
            Gets the metadata key
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.CustomMetadataAttribute.Value">
            <summary>
            Gets the value of the metadata
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Attributes.InputTemplateAttribute">
            <summary>
            Marks a configuration section interface as an input template.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Attributes.SelectionOptionAttribute">
            <summary>
            Represents a selection inside an enum that represents valid values for a configuration option
            </summary>
            <seealso cref="T:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute"/>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Snowflake.Configuration.Attributes.SelectionOptionAttribute.SerializeAs">
            <summary>
            Gets the value to serialize this enum value as
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.SelectionOptionAttribute.DisplayName">
            <summary>
            Gets or sets the display name of this value for human readable purposes
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.SelectionOptionAttribute.Private">
            <summary>
            Gets or sets a value indicating whether whether or not this option is displayed for the user
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.Attributes.SelectionOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Configuration.Attributes.SelectionOptionAttribute"/> class.
            Represents a selection inside an enum that represents valid values for a configuration option
            </summary>
            <param name="serializeAs">The value to serialize this enum as</param>
            <seealso cref="T:Snowflake.Configuration.Attributes.ConfigurationOptionAttribute"/>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Snowflake.Configuration.Attributes.SerializableSectionAttribute">
            <summary>
            Marks a configuration section property as serializable to configuration
            </summary>
        </member>
        <member name="F:Snowflake.Configuration.Attributes.SerializableSectionAttribute.FlagsOutputPath">
            <summary>
            The flags pseudo-destination
            </summary>
        </member>
        <member name="F:Snowflake.Configuration.Attributes.SerializableSectionAttribute.InputOutputPath">
            <summary>
            The input config pseudo-destination
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Attributes.SerializableSectionAttribute.Destination">
            <summary>
            Gets the destination the serialized form of this configuration will output to
            as defined by the <see cref="T:Snowflake.Configuration.Attributes.ConfigurationFileAttribute"/> attributes
            in the <see cref="T:Snowflake.Configuration.IConfigurationCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.Attributes.SerializableSectionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Configuration.Attributes.SerializableSectionAttribute"/> class.
            Default constructor for the section attribute
            </summary>
            <param name="destination">The destination the serialized form of this configuration will output to, see <see cref="P:Snowflake.Configuration.Attributes.SerializableSectionAttribute.Destination"/></param>
        </member>
        <member name="T:Snowflake.Configuration.IBooleanMapping">
            <summary>
            Maps the value of true and false to how an emulator configuration file stores booleans
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IBooleanMapping.False">
            <summary>
            Gets the value of false in an emulator configuration file
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IBooleanMapping.True">
            <summary>
            Gets the value of true in an emulator configuration file
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.IBooleanMapping.FromBool(System.Boolean)">
            <summary>
            Get the string value of a boolean
            </summary>
            <param name="value">The value to get for</param>
            <returns>The emulator configuration representation of the boolean</returns>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationCollection`1">
             <summary>
             A configuration collection represents a single file of configuration.
             One file can have one single serializer for every section, and multiple
             filename for the configuration collection.
             A configuration collection must be marked with one or more <see cref="T:Snowflake.Configuration.Attributes.ConfigurationFileAttribute"/>,
             and all seriazable properties marked with a <see cref="T:Snowflake.Configuration.Attributes.SerializableSectionAttribute"/> that matches one or more configuration files.
            
             The enumeration is guaranteed to enumerate in the order in which the section properties were described.
             </summary>
             <typeparam name="T">The type of the configuration collection</typeparam>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationCollection`1.Configuration">
            <summary>
            Gets the configuration instance which holds the configuration sections.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationCollection">
             <summary>
             A configuration collection represents a single file of configuration.
             One file can have one single serializer for every section, and multiple
             filename for the configuration collection.
             A configuration collection must be marked with one or more <see cref="T:Snowflake.Configuration.Attributes.ConfigurationFileAttribute"/>,
             and all seriazable properties marked with a <see cref="T:Snowflake.Configuration.Attributes.SerializableSectionAttribute"/> that matches one or more configuration files.
            
             The enumeration is guaranteed to enumerate in the order in which the section properties were described.
             </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationCollection.Descriptor">
            <summary>
            Gets the descriptor that describes this configuration collection.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationCollection.Item(System.String)">
            <summary>
            Gets a configuration section by it's property name
            </summary>
            <param name="sectionName">The property name of the section</param>
            <returns>The untyped configuration section with the given property name.</returns>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationCollectionDescriptor">
            <summary>
            Describes a configuration collection.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationCollectionDescriptor.Outputs">
            <summary>
            Gets the file outputs keyed on the file reference key to the file name
            The implementation should ensure this is immutable.
            <seealso cref="T:Snowflake.Configuration.Attributes.ConfigurationFileAttribute"/>
            <seealso cref="T:Snowflake.Configuration.IConfigurationFile"/>
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationCollectionDescriptor.SectionKeys">
            <summary>
            Gets the list of names of property section names.
            The implementation should ensure this is immutable and enumerate in the same order
            as the properties were described in the collection type.
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationCollectionDescriptor.GetDestination(System.String)">
            <summary>
            Gets the destination file reference key for a section
            </summary>
            <param name="sectionKey">The property name of the section</param>
            <returns>The file reference key</returns>
            <seealso cref="P:Snowflake.Configuration.IConfigurationCollectionDescriptor.Outputs"/>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationCollectionStore">
            <summary>
            Represents a store that can save and retrieve an aribtrary configuration
            collection representing a single emulator configuration file, associated with a game record
            </summary>
            <remarks>
            To "delete" a configuration, just overwrite the existing values with a default instance
            </remarks>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationCollectionStore.Get``1(System.Guid,System.String,System.String)">
             <summary>
             Retrieves the configuration collection associated with this game record.
             This method is guaranteed to return a usable instance of the configuration collection.
             If a prior configuration has not been set, it should return a default instance with all
             properties initialized.
            
             <para>
             This function should return the same configuration values with identical GUIDs for the same
             database instance. This may imply that the function is impure; the default implementation
             will save every retrieved database using <see cref="M:Snowflake.Configuration.IConfigurationCollectionStore.Set``1(Snowflake.Configuration.IConfigurationCollection{``0},System.Guid,System.String,System.String)"/>.
             internally. In other words, retrieval of a configuration may imply the persistence of the same configuration.
             </para>
             </summary>
             <typeparam name="T">The type of configuration collection</typeparam>
             <param name="gameRecord">The guid of the game record</param>
             <param name="emulator">The name of the emulator this collection belongs to</param>
             <param name="profile">The profile this collection belongs to</param>
             <returns>A valid configuration collection of type T</returns>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationCollectionStore.Set``1(Snowflake.Configuration.IConfigurationCollection{``0},System.Guid,System.String,System.String)">
            <summary>
            Saves and persists a configuration collection to the store.
            </summary>
            <param name="configuration">The configuration to save to the store</param>
            <param name="gameRecord">The guid of the game record associated with this configuration collection</param>
            <param name="emulator">The name of the emulator this collection belongs to</param>
            <param name="profile">The profile this collection belongs to</param>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationCollectionStore.Set(Snowflake.Configuration.IConfigurationValue)">
            <summary>
            Updates a single <em>existing</em> configuration value, this will error if the GUID is not found in
            the database.
            </summary>
            <param name="value">The configuration value with valid GUID and updated data</param>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationCollectionStore.Set(System.Collections.Generic.IEnumerable{Snowflake.Configuration.IConfigurationValue})">
            <summary>
            Updates multiple <em>existing</em> configuration values, this will error if the GUID is not found in
            the database.
            </summary>
            <param name="values">The configuration value with valid GUID and updated data</param>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationOptionDescriptor">
            <summary>
            Describes a configuration option.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.DisplayName">
            <summary>
            Gets the display name for human readable purposes of this option
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.Description">
            <summary>
            Gets a description of this configuration option
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.Simple">
            <summary>
            Gets a value indicating whether whether or not this option is a simple option (displayed in "Simple" configuration mode)
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.Private">
            <summary>
            Gets a value indicating whether whether or not this option is private (not ever displayed to the user)
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.Flag">
            <summary>
            Gets a value indicating whether a 'flag' property is never serialized into the configuration option, and is instead used to cause
            side effects to the configuration during emulator instance creation by the emulator handler.
            If a flag affects the configuration, it should be placed in the same section it modifies.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.Max">
            <summary>
            Gets the maximum value allowable for a number value
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.Min">
            <summary>
            Gets the minimum value allowable for a number value
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.Increment">
            <summary>
            Gets the increment to increase this by
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.IsPath">
            <summary>
            Gets a value indicating whether whether or not this string is a file path.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.OptionName">
            <summary>
            Gets the name of the option as it appears inside the emulator configuration
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.OptionKey">
            <summary>
            Gets the key of the configuration option
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.Default">
            <summary>
            Gets the default object.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.Type">
            <summary>
            Gets the CLR type of the option
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.OptionType">
            <summary>
            Gets the option type of the option
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.CustomMetadata">
            <summary>
            Gets any custom metadata attached to this option
            </summary>
            <see cref="T:Snowflake.Configuration.Attributes.CustomMetadataAttribute"/>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.SelectionOptions">
            <summary>
            Gets a list of selection option descriptors if this option is an enum.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationOptionDescriptor.IsSelection">
            <summary>
            Gets a value indicating whether whether or not this option is an enum.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationProperty">
            <summary>
            Represents a property in a configuration section
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationProperty.Value">
            <summary>
            Gets the value of the property
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationProperty.Metadata">
            <summary>
            Gets the metadata associated with this property
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationSection`1">
            <summary>
            Represents a serializable section in a configuration
            </summary>
            <typeparam name="T">The type of configuration</typeparam>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationSection`1.Configuration">
            <summary>
            Gets the typed section instance which holds the configuration values
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationSection">
            <summary>
            Represents a serializable section in a configuration
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationSection.Descriptor">
            <summary>
            Gets the descriptor that describes the configuration section.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationSection.Values">
             <summary>
             Gets the read only mapping of property names to configuration values
             Enumerating over the values key is not guaranteed to be in the same
             order as the order the properties were defined.
            
             The implementation is responsible for ensuring this mapping synced with the
             values stored in the object and ensuring this mapping is immutable.
             </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationSection.Item(System.String)">
            <summary>
            Gets or sets the option value with the specified property name in the configuration section
            in an untyped and unsafe manner.
            </summary>
            <remarks>Only use this if you know what you are doing. The safe manner to access configuration values is
            through the <see cref="P:Snowflake.Configuration.IConfigurationSection`1.Configuration"/> property.</remarks>
            <param name="key">The property name of the configuration option</param>
            <returns>The untyped value of the configuration value</returns>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationSectionDescriptor">
            <summary>
            Describes a configuration section
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationSectionDescriptor.Description">
            <summary>
            Gets the description of the section
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationSectionDescriptor.DisplayName">
            <summary>
            Gets the human readable name of the section
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationSectionDescriptor.SectionName">
            <summary>
            Gets the name of the section as it appears in configuration.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationSectionDescriptor.Options">
            <summary>
            Gets the list of configuration options in the section
            ordered as they were declared as properties.
            The implementation is responsible for ensuring this is immutable
            and correctly ordered.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationSectionDescriptor.Item(System.String)">
            <summary>
            Gets the configuration option with the specified property name
            </summary>
            <param name="optionKey">The property name of the option as declared</param>
            <returns>The configuration option</returns>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationSerializer">
            <summary>
            A configuration serializer serializes a ConfigurationSection into valid emulator configuration.
            If an emulator uses a different syle of configuration, re-implement ConfigurationSerializer for that emulator instead of
            manually using string templates.
            <see cref="T:Snowflake.Configuration.IConfigurationSerializer"/>
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationSerializer.TypeMapper">
            <value>
            The type mapper for this serializer.
            <see cref="T:Snowflake.Configuration.IConfigurationTypeMapper"/>
            </value>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationSerializer.SerializeValue(System.Object)">
            <summary>
            Serializes one single value using the type mapper. Usually not very useful as this does not serialize a line and should
            simply shim the TypeMapper, using reflection to get the runtime type of the objeect. Intended as a helper method for
            <see cref="M:Snowflake.Configuration.IConfigurationSerializer.SerializeLine``1(System.String,``0)"></see>
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The value serialized with the typemapper</returns>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationSerializer.SerializeLine``1(System.String,``0)">
            <summary>
            Serializes a line in the configuration with a key and a value
            </summary>
            <typeparam name="T">The type of the value to serialize. Ensure the TypeMapper is setup to handle this type</typeparam>
            <param name="key">The key of the option</param>
            <param name="value">The value to serialize</param>
            <returns>The serialized line as it would appear in the emulator configuration</returns>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationSerializer.Serialize(Snowflake.Configuration.IConfigurationSection)">
            <summary>
            Serializes the specified configuration section.
            </summary>
            <param name="configurationSection">The configuration section object to serialize</param>
            <returns>The entire section serialized as a string</returns>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationSerializer.SerializeHeader(System.String)">
            <summary>
            Serializes the header of the configuration section
            </summary>
            <param name="headerString">The string to serialize as a header.</param>
            <returns>The serialized header line</returns>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationSerializer.SerializeFooter(System.String)">
            <summary>
            Serializes the footer of the configuration section
            </summary>
            <param name="footerString">The string to serialize as a footer</param>
            <returns>The serializes footer string</returns>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationTypeMapper">
            <summary>
            Maps types to a correct string value that can be interpreted by the emulator configuration.
            Convention requires that there be a default converver for Enum types implemented by default
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationTypeMapper.Add``1(System.Func{``0,System.String})">
            <summary>
            Adds a converter for this type mapper to support.
            </summary>
            <typeparam name="T">The type to convert</typeparam>
            <param name="converter">The converter function</param>
        </member>
        <member name="M:Snowflake.Configuration.IConfigurationTypeMapper.ConvertValue``1(``0)">
            <summary>
            Converts a value to the format using a previously configured converter function
            </summary>
            <typeparam name="T">The type to convert</typeparam>
            <param name="value">The value to convert</param>
            <returns>The converted value</returns>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationTypeMapper.Item(System.Type,System.Object)">
            <summary>
            Converts a value to the format using a previously configured converter function
            </summary>
            <param name="t">The type to convert</param>
            <param name="value">The value to convert</param>
            <returns>The converted value</returns>
        </member>
        <member name="T:Snowflake.Configuration.IConfigurationValue">
            <summary>
            Represents a unique configuration value.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationValue.Value">
            <summary>
            Gets or sets the value of the vlaue
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.IConfigurationValue.Guid">
            <summary>
            Gets the GUID record of the value.
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Input.IInputMapping">
            <summary>
            Maps controller elements onto the string representation of the element for the configuration.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputMapping.InputApi">
            <summary>
            Gets the input API this mapping supports.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputMapping.DeviceLayouts">
            <summary>
            Gets the device layouts this input mapping supports within this input API.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputMapping.Item(Snowflake.Input.Controller.ControllerElement)">
            <summary>
            Gets the mapping for this controller element, or the null value if not present
            </summary>
            <param name="element">The mapping for this controller element</param>
            <returns></returns>
        </member>
        <member name="T:Snowflake.Configuration.Input.IInputOption">
            <summary>
            Represents an input configuration option
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputOption.InputOptionType">
            <summary>
            Gets the type of value the input option accepts
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputOption.TargetElement">
            <summary>
            Gets the mapped element to the input option.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputOption.OptionName">
            <summary>
            Gets the name of the input option as it appears in configuration.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputOption.KeyName">
            <summary>
            Gets the property name of the input option as it is declared
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Input.IInputSerializer">
            <summary>
            Serializes input configuration
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.Input.IInputSerializer.Serialize(Snowflake.Configuration.Input.IInputTemplate,Snowflake.Configuration.Input.IInputMapping)">
            <summary>
            Serializes the specified input template.
            </summary>
            <param name="inputTemplate">The input template to serialize</param>
            <param name="inputMapping">The input mapping to serialize with</param>
            <returns>The entire input template serialized as a string</returns>
        </member>
        <member name="M:Snowflake.Configuration.Input.IInputSerializer.SerializeInput(System.String,Snowflake.Input.Controller.ControllerElement,Snowflake.Configuration.Input.IInputMapping)">
            <summary>
            Serializes a controller element line using the provided input mapper.
            </summary>
            <param name="key">The key of the option</param>
            <param name="element">The controller element to serialize</param>
            <param name="inputMapping">The input mapping to serialize with</param>
            <returns></returns>
        </member>
        <member name="T:Snowflake.Configuration.Input.IInputTemplate`1">
            <summary>
            Represents an input configuration template from which valid input configuration
            can be serialized. The implementation of which is a wrapper around an interface that implements this interface.
            </summary>
            <typeparam name="T">The type of input configuration</typeparam>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputTemplate`1.Template">
            <summary>
            Gets the template in which the values are stored for this input configuration
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Input.IInputTemplate">
            <summary>
            Represents an input configuration template from which valid input configuration
            can be serialized.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputTemplate.PlayerIndex">
            <summary>
            Gets the controller index of this template instance.
            This is zero indexed, Player 1 for example is index 0.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputTemplate.Values">
            <summary>
            Gets the mapped controller elements of the input configuration.
            The implementation of this properly should require this be immutable.
            This dictionary is keyed on the property names of the input template interface.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputTemplate.Options">
            <summary>
            Gets the options representing the fields in which the options are serialized in configuration,
            the implementation of this should ensure that this is enumerated in the same order
            with which the properties are described.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.IInputTemplate.Item(Snowflake.Input.Controller.ControllerElement)">
            <summary>
            Gets or sets the real device element that has been mapped to a virtual element.
            </summary>
            <param name="virtualElement">The virtual element on the controller definition</param>
        </member>
        <member name="T:Snowflake.Configuration.Input.InputOptionAttribute">
            <summary>
            Marks an attribute as an input option
            </summary>
        </member>
        <member name="M:Snowflake.Configuration.Input.InputOptionAttribute.#ctor(System.String,Snowflake.Configuration.Input.InputOptionType,Snowflake.Input.Controller.ControllerElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Configuration.Input.InputOptionAttribute"/> class.
            Marks an attribute as an input option
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputOptionAttribute.InputOptionType">
            <summary>
            Gets the type of this input option, whether it accepts
            keyboard only mappings, controller button mappings, or any type of mapping
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputOptionAttribute.TargetElement">
            <summary>
            Gets the target controller element; the button on the virtual controller that maps to this input option
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.Input.InputOptionAttribute.OptionName">
            <summary>
            Gets the name of the option as it appears in configuration
            </summary>
        </member>
        <member name="T:Snowflake.Configuration.Input.InputOptionType">
            <summary>
            The type of input the option accepts
            </summary>
        </member>
        <member name="F:Snowflake.Configuration.Input.InputOptionType.Controller">
            <summary>
            This input option accepts only controller element mappings.
            </summary>
        </member>
        <member name="F:Snowflake.Configuration.Input.InputOptionType.ControllerAxes">
            <summary>
            This input option is restricted to axes only
            </summary>
        </member>
        <member name="F:Snowflake.Configuration.Input.InputOptionType.Keyboard">
            <summary>
            This input option accepts only keyboard keys
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.ISelectionOptionDescriptor.DisplayName">
            <summary>
            Gets the display name of this selection option.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.ISelectionOptionDescriptor.EnumName">
            <summary>
            Gets the name of the enumeration value this selection option is backed by.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.ISelectionOptionDescriptor.EnumType">
            <summary>
            Gets the CLR enumeration type this selection value is of.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.ISelectionOptionDescriptor.Private">
            <summary>
            Gets a value indicating whether whether or not this selection is to be shown to the user
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.ISelectionOptionDescriptor.SerializeAs">
            <summary>
            Gets the value this selection option appears in the serialized configuration.
            </summary>
        </member>
        <member name="P:Snowflake.Configuration.ISelectionOptionDescriptor.NumericValue">
            <summary>
            Gets the numeric value that represents this selection in the context of the enumeration type.
            </summary>
        </member>
        <member name="T:Snowflake.Execution.Extensibility.IConfigurationFactory">
            <summary>
            Provides configuration collections specific to the given emulator.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IConfigurationFactory.InputMappings">
            <summary>
            Gets the input mappings for this emulator adapter.
            <para>
            This should be specified in JSON input mapping format, in the
            InputMappings directory under the plugin resource folder.
            </para>
            <para>
            The general convention for these files are
            common/InputMapping/DEVICE_NAME
            </para>
            </summary>
        </member>
        <member name="M:Snowflake.Execution.Extensibility.IConfigurationFactory.GetConfiguration(System.Guid,System.String)">
            <summary>
            Gets the valid set of configuration required to launch this emulator for a given game record.
            </summary>
            <seealso cref="T:Snowflake.Configuration.IConfigurationCollectionStore"/>
            <param name="gameRecord">The GUID of the game that is associated with this set of configuration collections</param>
            <param name="profileName">The profile name to get configuration for. By default, the profile name must be 'default'</param>
            <returns>A set of configuration collection keyed on the expected file names of the configuration files.</returns>
        </member>
        <member name="M:Snowflake.Execution.Extensibility.IConfigurationFactory.GetConfiguration">
            <summary>
            Gets the default valid set of configuration required to launch this emulator for a given game record.
            </summary>
            <returns>A set of configuration collection keyed on the expected file names of the configuration files.</returns>
        </member>
        <member name="M:Snowflake.Execution.Extensibility.IConfigurationFactory.GetInputMappings(Snowflake.Execution.Extensibility.IEmulatedController)">
            <summary>
            Gets the input template for the given emulated controller port.
            </summary>
            <param name="emulatedDevice">The given device to create an input template for.</param>
            <returns>A valid input template for the given emulated device details.</returns>
        </member>
        <member name="T:Snowflake.Execution.Extensibility.IConfigurationFactory`2">
            <summary>
            Generic version of <see cref="T:Snowflake.Execution.Extensibility.IConfigurationFactory"/>
            </summary>
            <typeparam name="TConfigurationCollection">The collection this factory produces.</typeparam>
            <typeparam name="TInputTemplate">The collection this factory produces.</typeparam>
        </member>
        <member name="M:Snowflake.Execution.Extensibility.IConfigurationFactory`2.GetConfiguration(System.Guid,System.String)">
            <summary>
            Gets the valid set of configuration required to launch this emulator for a given game record.
            </summary>
            <seealso cref="T:Snowflake.Configuration.IConfigurationCollectionStore"/>
            <param name="gameRecord">The GUID of the game that is associated with this set of configuration collections</param>
            <param name="profileName">The profile name to get configuration for. By default, the profile name must be 'default'</param>
            <returns>A set of configuration collection keyed on the expected file names of the configuration files.</returns>
        </member>
        <member name="M:Snowflake.Execution.Extensibility.IConfigurationFactory`2.GetConfiguration">
            <summary>
            Gets the default valid set of configuration required to launch this emulator for a given game record.
            </summary>
            <returns>A set of configuration collection keyed on the expected file names of the configuration files.</returns>
        </member>
        <member name="M:Snowflake.Execution.Extensibility.IConfigurationFactory`2.GetInputMappings(Snowflake.Execution.Extensibility.IEmulatedController)">
            <summary>
            Gets the input template for the given emulated controller port.
            </summary>
            <param name="emulatedDevice">The given device to create an input template for.</param>
            <returns>A valid input template for the given emulated device details.</returns>
        </member>
        <member name="T:Snowflake.Execution.Extensibility.IEmulatedController">
            <summary>
            Represents a controller port on the emulated machine
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatedController.PortIndex">
            <summary>
            Gets the port number index emulated, zero indexed.
            eg. (0 -> Player One, 1 -> Player 2)
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatedController.PhysicalDevice">
            <summary>
            Gets the physical plugged-in device from the host machine
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatedController.TargetLayout">
            <summary>
            Gets the layout of the emulated controller
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatedController.LayoutMapping">
            <summary>
            Gets the mapped controller elements mapping real inputs to the emulated controller
            </summary>
        </member>
        <member name="T:Snowflake.Execution.Extensibility.IEmulator">
            <summary>
            An <see cref="T:Snowflake.Execution.Extensibility.IEmulator"/> handles execution of a game by creating tasks with
            contextual information to execute with the provided task runner.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulator.Runner">
            <summary>
            Gets the task runner that this emulator plugin delegates.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulator.Properties">
            <summary>
            Gets the emulator specific properties for this emulator.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulator.ConfigurationFactory">
            <summary>
            Gets the factory that produces configuration files for this emulator.
            </summary>
        </member>
        <member name="M:Snowflake.Execution.Extensibility.IEmulator.CreateTask(Snowflake.Records.Game.IGameRecord,Snowflake.Execution.Saving.ISaveLocation,System.Collections.Generic.IList{Snowflake.Execution.Extensibility.IEmulatedController},System.String)">
            <summary>
            Creates a task to execute the given game with the emulator <see cref="P:Snowflake.Execution.Extensibility.IEmulator.Runner"/>
            </summary>
            <param name="executingGame">The game to execute.</param>
            <param name="saveLocation">The provided save location.</param>
            <param name="controllerConfiguration">The emulated controller configuration.</param>
            <param name="configurationProfile">The profile name of the emulator configuration.</param>
            <returns></returns>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorProperties.SaveFormat">
            <summary>
            Gets the save type this emulator uses. Emulators with the same save type will share a directory
            allowing save sharing across emulators. Should your emulator support a different save type,
            please change this to a unique value to avoid save conflicts.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorProperties.Mimetypes">
            <summary>
            Gets a list of mimetypes this emulator can execute. This is a required key,
            an emulator without supported mimetypes will not display for any
            file type.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorProperties.RequiredSystemFiles">
            <summary>
            Gets a list of BIOS files this emulator requires, listed under the optional metadata key
            requiredbios.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorProperties.OptionalSystemFiles">
            <summary>
            Gets a list of BIOS files this emulator requires, listed under the optional metadata key
            optionalbios.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorProperties.SpecialCapabilities">
            <summary>
            Gets a list of emulator special capabiities strings under the capabilities metadata key.
            This key is optional, and there is no formal specification for these capabilities,
            which may include ingame overlays, cloud saves, etc. It is used to indicate to clients
            that your emulator supports these capabilities upon a formally agreed upon API.
            </summary>
        </member>
        <member name="T:Snowflake.Execution.Extensibility.IEmulatorTask">
            <summary>
            An emulator task represents a yet-to-be run
            game that will be processed and executed by an
            <see cref="T:Snowflake.Execution.Extensibility.IEmulatorTaskRunner"/> in order to run a game.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorTask.EmulatorConfiguration">
            <summary>
            Gets the configuration collection for the current emulation.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorTask.ControllerConfiguration">
            <summary>
            Gets a tuple of controller configuration for each template and the relative configuration mapping.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorTask.EmulatingGame">
            <summary>
            Gets the game that is to be emulated.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorTask.GameSaveLocation">
            <summary>
            Gets the location where the save files for this game are to be persisted and loaded from.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorTask.Pragmas">
            <summary>
            Gets any string pragmas declared by the <see cref="T:Snowflake.Execution.Extensibility.IEmulator"/> that produced this task.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorTask.ProcessTaskRoot">
            <summary>
            Gets the Task Root for an executable emulator, if
            this task requires access to an external application.
            <remarks>
            If this task does not require a task root, will be null.
            </remarks>
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorTask.TaskIdentifier">
            <summary>
            Gets the identifier of this task as a unique ID.
            </summary>
        </member>
        <member name="T:Snowflake.Execution.Extensibility.IEmulatorTaskResult">
            <summary>
            A <see cref="T:Snowflake.Execution.Extensibility.IEmulatorTaskResult"/> represents the result of
            an <see cref="T:Snowflake.Execution.Extensibility.IEmulatorTask"/> once it has been processed and executed by
            an <see cref="T:Snowflake.Execution.Extensibility.IEmulatorTaskRunner"/>
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorTaskResult.EmulatorName">
            <summary>
            Gets the name of the emulator that processed the task.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorTaskResult.StartTime">
            <summary>
            Gets the time this result processed.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Extensibility.IEmulatorTaskResult.IsRunning">
            <summary>
            Gets or sets a value whether or not this task is still running.
            </summary>
        </member>
        <member name="M:Snowflake.Execution.Extensibility.IEmulatorTaskResult.Closed">
            <summary>
            A method to be invoked once this task has ended.
            </summary>
        </member>
        <member name="T:Snowflake.Execution.Extensibility.IEmulatorTaskRunner">
            <summary>
            An <see cref="T:Snowflake.Execution.Extensibility.IEmulatorTaskRunner"/> proccesses and runs <see cref="T:Snowflake.Execution.Extensibility.IEmulatorTask"/> instances.
            </summary>
        </member>
        <member name="M:Snowflake.Execution.Extensibility.IEmulatorTaskRunner.ExecuteEmulationAsync(Snowflake.Execution.Extensibility.IEmulatorTask)">
            <summary>
            Executes the given <see cref="T:Snowflake.Execution.Extensibility.IEmulatorTask"/> asynchronously,
            generating and serializing configuration files, persisting 
            and loading save files, and other general preparation.
            </summary>
            <param name="task">The task to run.</param>
            <returns>The result of the executed task.</returns>
        </member>
        <member name="T:Snowflake.Execution.Process.IEmulatorExecutable">
            <summary>
            Represents an external emulator that can be called using the operating system shell.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Process.IEmulatorExecutable.EmulatorName">
            <summary>
            Gets the name of the emulator.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Process.IEmulatorExecutable.Version">
            <summary>
            Gets the version of the emulator.
            </summary>
        </member>
        <member name="M:Snowflake.Execution.Process.IEmulatorExecutable.GetProcessBuilder">
            <summary>
            Gets a <see cref="T:Snowflake.Execution.Process.IProcessBuilder"/> that can be used to start this emulator.
            </summary>
            <returns>A <see cref="T:Snowflake.Execution.Process.IProcessBuilder"/> that can be used to start this emulator.</returns>
        </member>
        <member name="T:Snowflake.Execution.Process.IEmulatorExecutableProvider">
            <summary>
            Provides access to loaded <see cref="T:Snowflake.Execution.Process.IEmulatorExecutable"/> instances.
            </summary>
        </member>
        <member name="M:Snowflake.Execution.Process.IEmulatorExecutableProvider.GetEmulator(System.String)">
            <summary>
            Gets any emulator with a matching name.
            </summary>
            <param name="name">The name of the emulator.</param>
            <returns>An <see cref="T:Snowflake.Execution.Process.IEmulatorExecutable"/> that can start the given emulator.</returns>
        </member>
        <member name="M:Snowflake.Execution.Process.IEmulatorExecutableProvider.GetEmulator(System.String,System.Version)">
            <summary>
            Gets an emulator with the matching name and closest major version.
            </summary>
            <param name="name">The name of the emulator.</param>
            <param name="semver">The requested version of the emulator.</param>
            <returns>An <see cref="T:Snowflake.Execution.Process.IEmulatorExecutable"/> that is guaranteed to have
            at least the same major version as the requested version, or null if no
            <see cref="T:Snowflake.Execution.Process.IEmulatorExecutable"/> are loaded with the requested name and version.</returns>
        </member>
        <member name="T:Snowflake.Execution.Process.IEmulatorTaskRoot">
            <summary>
            The directory for an emulator process.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Process.IEmulatorTaskRoot.TaskRoot">
            <summary>
            Gets the root directory for the task that involves an external emulator executable.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Process.IEmulatorTaskRoot.SaveDirectory">
            <summary>
            Gets the directory that the external emulator executable will save game data in.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Process.IEmulatorTaskRoot.ConfigurationDirectory">
            <summary>
            Gets the directory that the external emulator executable will load configuration data from.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Process.IEmulatorTaskRoot.SystemDirectory">
            <summary>
            Gets the directory that the external emulator executable will load system or BIOS files from.
            </summary>
        </member>
        <member name="T:Snowflake.Execution.Process.IEmulatorTaskRootDirectoryProvider">
            <summary>
            Provisions a folder to root instances of <see cref="T:Snowflake.Execution.Process.IEmulatorTaskRoot"/> off of.
            </summary>
        </member>
        <member name="M:Snowflake.Execution.Process.IEmulatorTaskRootDirectoryProvider.GetTaskRoot(Snowflake.Execution.Extensibility.IEmulatorTask)">
            <summary>
            Provisions a task root directory for the given <see cref="T:Snowflake.Execution.Extensibility.IEmulatorTask"/>
            </summary>
            <param name="task">The task to provision a directory for.</param>
            <returns>A clean working directory for the <see cref="T:Snowflake.Execution.Process.IEmulatorTaskRoot"/>.</returns>
        </member>
        <member name="T:Snowflake.Execution.Process.IProcessBuilder">
            <summary>
            Provides a fluent API on top of <see cref="T:System.Diagnostics.ProcessStartInfo"/>
            to make launching processes easier and cleaner.
            </summary>
        </member>
        <member name="M:Snowflake.Execution.Process.IProcessBuilder.ToProcessStartInfo">
            <summary>
            Create a <see cref="T:System.Diagnostics.ProcessStartInfo"/> from this builder.
            </summary>
            <returns>The <see cref="T:System.Diagnostics.ProcessStartInfo"/> with the given arguments.</returns>
        </member>
        <member name="M:Snowflake.Execution.Process.IProcessBuilder.WithArgument(System.String)">
            <summary>
            Adds a switch type argument to the launching process.
            </summary>
            <param name="switchName">The argument to add.</param>
            <returns>The instance of <see cref="T:Snowflake.Execution.Process.IProcessBuilder"/>.</returns>
        </member>
        <member name="M:Snowflake.Execution.Process.IProcessBuilder.WithArgument(System.String,System.String,System.Boolean)">
            <summary>
            Adds a space separated parameter-type argument to the launching process.
            </summary>
            <param name="parameterName">The name of the parameter,</param>
            <param name="value">The value of the argument.</param>
            <param name="quoted">Whether or not the value is enclosed in double quotes.</param>
            <returns>The instance of <see cref="T:Snowflake.Execution.Process.IProcessBuilder"/></returns>
        </member>
        <member name="T:Snowflake.Execution.Saving.ISaveLocation">
            <summary>
            Represents a location where saves from emulators are to persist and
            be loaded across EmulatorTasks.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Saving.ISaveLocation.LocationGuid">
            <summary>
            Gets the GUID of this save location.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Saving.ISaveLocation.LocationRoot">
            <summary>
            Gets the root directory of this save location.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Saving.ISaveLocation.RecordGuid">
            <summary>
            Gets the game record guid of this save location
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Saving.ISaveLocation.SaveFormat">
            <summary>
            Gets the format of this save file.
            Emulators that use the same save format can thus share saves.
            </summary>
        </member>
        <member name="P:Snowflake.Execution.Saving.ISaveLocation.LastModified">
            <summary>
            Gets the date this save location was last persisted to.
            </summary>
        </member>
        <member name="M:Snowflake.Execution.Saving.ISaveLocation.RetrieveTo(System.IO.DirectoryInfo)">
            <summary>
            Retrieves the save files from the save location and
            copies save files to the emulator save directory.
            </summary>
            <param name="emulatorSaveDirectory">The directory that the emulator stores saves.</param>
            <returns>The files that were copied to the save directory</returns>
        </member>
        <member name="M:Snowflake.Execution.Saving.ISaveLocation.PersistFrom(System.IO.DirectoryInfo)">
            <summary>
            Persists all files from the given directory and
            copies all files from the emulater save directory to the save location.
            Also updates the <see cref="P:Snowflake.Execution.Saving.ISaveLocation.LastModified"/> value.
            </summary>
            <param name="emulatorSaveDirectory">The </param>
            <returns>The files that were copied</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Snowflake.Execution.Saving.ISaveLocationProvider" -->
        <member name="M:Snowflake.Execution.Saving.ISaveLocationProvider.CreateSaveLocationAsync(Snowflake.Records.Game.IGameRecord,System.String)">
            <summary>
            Provisions a new <see cref="T:Snowflake.Execution.Saving.ISaveLocation"/>
            </summary>
            <param name="gameRecord">The game to provision this location for.</param>
            <param name="saveType">The type of save this location contains.</param>
            <returns>The newly created save location</returns>
        </member>
        <member name="M:Snowflake.Execution.Saving.ISaveLocationProvider.UpdateSaveLocation(Snowflake.Execution.Saving.ISaveLocation)">
            <summary>
            Updates the save location to the registery
            </summary>
            <param name="location">The location to update.</param>
            <returns>The new location.</returns>
        </member>
        <member name="M:Snowflake.Execution.Saving.ISaveLocationProvider.GetSaveLocationAsync(System.Guid)">
            <summary>
            Gets the save location with the given GUID.
            </summary>
            <param name="saveLocationGuid">The GUID of the desired save location.</param>
            <exception cref="T:System.IO.FileNotFoundException">If the save location is not found.</exception>
            <returns>The save location.</returns>
        </member>
        <member name="M:Snowflake.Execution.Saving.ISaveLocationProvider.DeleteSaveLocation(System.Guid)">
            <summary>
            Deletes the save location with the given GUID. Does nothing if the save location does not exist.
            </summary>
            <param name="saveLocationGuid">The GUID of the desired save location to delete.</param>
        </member>
        <member name="M:Snowflake.Execution.Saving.ISaveLocationProvider.GetSaveLocationsAsync(Snowflake.Records.Game.IGameRecord)">
            <summary>
            Gets all save locations that were created for the given <see cref="T:Snowflake.Records.Game.IGameRecord"/>.
            It is suggested that the save locations be grouped by type and date created descendingly, but
            this is not required by implementations.
            </summary>
            <param name="gameRecord">The game associated with the save locations.</param>
            <returns>An enumerable of all the save locationa previously provisioned foe the given game.</returns>
        </member>
        <member name="M:Snowflake.Execution.Saving.ISaveLocationProvider.GetAllSaveLocationsAsync">
            <summary>
            Gets all the save locations managed by this provider.
            </summary>
            <returns>All the save locations managed by this provider.</returns>
        </member>
        <member name="T:Snowflake.Execution.SystemFIles.ISystemFileProvider">
            <summary>
            Provides System and BIOS files for emulator adapters.
            </summary>
        </member>
        <member name="M:Snowflake.Execution.SystemFIles.ISystemFileProvider.GetSystemFile(Snowflake.Platform.IBiosFile)">
            <summary>
            Gets the specified BIOS file if available.
            </summary>
            <throws>FileNotFoundException if the BIOS file is not available.</throws>
            <param name="biosFile">The BIOS file specification.</param>
            <returns>The file as a stream.</returns>
        </member>
        <member name="M:Snowflake.Execution.SystemFIles.ISystemFileProvider.GetSystemFilePath(Snowflake.Platform.IBiosFile)">
            <summary>
            Gets the path of the specified BIOS file if available.
            </summary>
            <throws>FileNotFoundException if the BIOS file is not available.</throws>
            <param name="biosFile">The BIOS file specification.</param>
            <returns>The path to the file.</returns>
        </member>
        <member name="M:Snowflake.Execution.SystemFIles.ISystemFileProvider.AddSystemFile(Snowflake.Platform.IBiosFile,System.IO.FileInfo)">
            <summary>
            Adds the specified BIOS file to the registry.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">If the system file is not found.</exception>
            <param name="biosFile">The BIOS file specification.</param>
            <param name="systemFilePath">The path to the file.</param>
        </member>
        <member name="M:Snowflake.Execution.SystemFIles.ISystemFileProvider.AddSystemFile(Snowflake.Platform.IBiosFile,System.IO.Stream)">
            <summary>
            Adds the specified BIOS file to the registry.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">If the system file is not found.</exception>
            <param name="biosFile">The BIOS file specification.</param>
            <param name="systemFileStream">The file as a stream.</param>
        </member>
        <member name="M:Snowflake.Execution.SystemFIles.ISystemFileProvider.AddSystemFileAsync(Snowflake.Platform.IBiosFile,System.IO.Stream)">
            <summary>
            Adds the specified BIOS file to the registry.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">If the system file is not found.</exception>
            <param name="biosFile">The BIOS file specification.</param>
            <param name="systemFileStream">The file as a stream.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Snowflake.Execution.SystemFIles.ISystemFileProvider.ContainsSystemFile(Snowflake.Platform.IBiosFile)">
            <summary>
            Returns whether or not a given BIOS file is contained in the registery
            </summary>
            <param name="biosFile">The requested BIOS file.</param>
            <returns>Whether or not the registry contiains the given BIOS file.</returns>
        </member>
        <member name="T:Snowflake.Extensibility.Configuration.IPluginConfigurationStore">
            <summary>
            Represents a store that can save and retrieve an aribtrary configuration
            collection representing a single emulator configuration file, associated with a game record
            </summary>
            <remarks>
            To "delete" a configuration, just overwrite the existing values with a default instance
            </remarks>
        </member>
        <member name="M:Snowflake.Extensibility.Configuration.IPluginConfigurationStore.Get``1">
            <summary>
            Retrieves the configuration collection associated with this game record.
            This method is guaranteed to return a usable instance of the configuration collection.
            If a prior configuration has not been set, it should return a default instance with all
            properties initialized.
            </summary>
            <typeparam name="T">The type of configuration collection</typeparam>
            <returns>The configuration collection associated with this game record. </returns>
        </member>
        <member name="M:Snowflake.Extensibility.Configuration.IPluginConfigurationStore.Set``1(Snowflake.Configuration.IConfigurationSection{``0})">
            <summary>
            Saves and persists a configuration collection to the store.
            </summary>
            <typeparam name="T">The type of configuration collection</typeparam>
            <param name="configuration">The configuration to save to the store</param>
        </member>
        <member name="M:Snowflake.Extensibility.Configuration.IPluginConfigurationStore.Set(Snowflake.Configuration.IConfigurationValue)">
            <summary>
            Updates a single <em>existing</em> configuration value, this will error if the GUID is not found in
            the database.
            </summary>
            <param name="value">The configuration value with valid GUID and updated data</param>
        </member>
        <member name="M:Snowflake.Extensibility.Configuration.IPluginConfigurationStore.Set(System.Collections.Generic.IEnumerable{Snowflake.Configuration.IConfigurationValue})">
            <summary>
            Updates multiple <em>existing</em> configuration values, this will error if the GUID is not found in
            the database.
            </summary>
            <param name="values">The configuration value with valid GUID and updated data</param>
        </member>
        <member name="T:Snowflake.Extensibility.ILogger">
            <summary>
            Provides logging services
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.ILogger.Name">
            <summary>
            Gets the name of the logger
            </summary>
        </member>
        <member name="M:Snowflake.Extensibility.ILogger.Log(System.String,Snowflake.Extensibility.LogLevel)">
            <summary>
            Log a messsage with the specified <see cref="T:Snowflake.Extensibility.LogLevel"/>
            </summary>
            <param name="messsage">The message to log</param>
            <param name="logLevel">The log level</param>
        </member>
        <member name="M:Snowflake.Extensibility.ILogger.Trace(System.String)">
            <summary>
            Log a message at the <see cref="F:Snowflake.Extensibility.LogLevel.Trace"/> log level
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Snowflake.Extensibility.ILogger.Debug(System.String)">
            <summary>
            Log a message at the <see cref="F:Snowflake.Extensibility.LogLevel.Debug"/> log level
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Snowflake.Extensibility.ILogger.Info(System.String)">
            <summary>
            Log a message at the <see cref="F:Snowflake.Extensibility.LogLevel.Info"/> log level
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Snowflake.Extensibility.ILogger.Warn(System.String)">
            <summary>
            Log a message at the <see cref="F:Snowflake.Extensibility.LogLevel.Warn"/> log level
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Snowflake.Extensibility.ILogger.Error(System.String)">
            <summary>
            Log a message at the <see cref="F:Snowflake.Extensibility.LogLevel.Error"/> log level
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:Snowflake.Extensibility.ILogger.Error(System.Exception,System.String)">
            <summary>
            Logs an exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:Snowflake.Extensibility.ILogger.Fatal(System.String)">
            <summary>
            Log a message at the <see cref="F:Snowflake.Extensibility.LogLevel.Fatal"/> log level
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="T:Snowflake.Extensibility.IPlugin">
            <summary>
            The common interface between all plugins.
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.IPlugin.Name">
            <summary>
            Gets the name of the plugin
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.IPlugin.Author">
            <summary>
            Gets the author of the plugin.
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.IPlugin.Description">
            <summary>
            Gets a short description of the plugin
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.IPlugin.Version">
            <summary>
            Gets the version of the plugin
            </summary>
        </member>
        <member name="T:Snowflake.Extensibility.IPluginCollection`1">
            <summary>
            Represents an always-updated collection of plugins relative to
            a <see cref="T:Snowflake.Services.IPluginManager"/> that always gets all the plugins loaded of type T.
            </summary>
            <typeparam name="T">The type of plugin</typeparam>
        </member>
        <member name="P:Snowflake.Extensibility.IPluginCollection`1.Item(System.String)">
            <summary>
            Gets the instance of T.
            </summary>
            <param name="pluginName">The name of the plugin</param>
            <returns>An instance of the plugin with the given plugin name. </returns>
        </member>
        <member name="F:Snowflake.Extensibility.LogLevel.Trace">
            <summary>
            The TRACE Level designates finer-grained informational events than the DEBUG
            </summary>
        </member>
        <member name="F:Snowflake.Extensibility.LogLevel.Debug">
            <summary>
            The DEBUG Level designates fine-grained informational events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:Snowflake.Extensibility.LogLevel.Info">
            <summary>
            The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.
            </summary>
        </member>
        <member name="F:Snowflake.Extensibility.LogLevel.Warn">
            <summary>
            The WARN level designates potentially harmful situations.
            </summary>
        </member>
        <member name="F:Snowflake.Extensibility.LogLevel.Error">
            <summary>
            The ERROR level designates error events that might still allow the application to continue running.
            </summary>
        </member>
        <member name="F:Snowflake.Extensibility.LogLevel.Fatal">
            <summary>
            The FATAL level designates very severe error events that will presumably lead the application to abort.
            </summary>
        </member>
        <member name="T:Snowflake.Extensibility.PluginAttribute">
            <summary>
            All plugins must be marked with this attribute to be loaded properly.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Snowflake.Extensibility.PluginAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Extensibility.PluginAttribute"/> class.
            </summary>
            <param name="pluginName">The name of the plugin. Must be the same as in plugin.json</param>
            <param name="version">The version of the plugin.</param>
        </member>
        <member name="P:Snowflake.Extensibility.PluginAttribute.PluginName">
            <summary>
            Gets the name of the plugin. Must be the same as in plugin.json
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.PluginAttribute.Author">
            <summary>
            Gets or sets the name of the plugin author
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.PluginAttribute.Description">
            <summary>
            Gets or sets a short description of the plugin
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.PluginAttribute.Version">
            <summary>
            Gets the version of the plugin
            </summary>
        </member>
        <member name="T:Snowflake.Extensibility.PluginInfoFields">
            <summary>
            Static fields in plugin information
            </summary>
        </member>
        <member name="F:Snowflake.Extensibility.PluginInfoFields.Name">
            <summary>
            The name of the plugin
            </summary>
        </member>
        <member name="F:Snowflake.Extensibility.PluginInfoFields.Description">
            <summary>
            The description of the plugin
            </summary>
        </member>
        <member name="F:Snowflake.Extensibility.PluginInfoFields.Author">
            <summary>
            The author of the plugin
            </summary>
        </member>
        <member name="F:Snowflake.Extensibility.PluginInfoFields.SupportedPlatforms">
            <summary>
            The plugins supported platforms
            </summary>
        </member>
        <member name="T:Snowflake.Extensibility.Provisioning.IPluginProperties">
            <summary>
            Represents the properties defined inside a plugin.json
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProperties.PropertyKeys">
            <summary>
            Gets all the properties defined
            </summary>
        </member>
        <member name="M:Snowflake.Extensibility.Provisioning.IPluginProperties.Get(System.String)">
            <summary>
            Gets a single property
            </summary>
            <param name="key">The key of the property</param>
            <returns>The property to get</returns>
        </member>
        <member name="M:Snowflake.Extensibility.Provisioning.IPluginProperties.GetEnumerable(System.String)">
            <summary>
            Gets a list of properties
            </summary>
            <param name="key">The key of the property list</param>
            <returns>The list of properties</returns>
        </member>
        <member name="M:Snowflake.Extensibility.Provisioning.IPluginProperties.GetDictionary(System.String)">
            <summary>
            Gets a dictionary of properties
            </summary>
            <param name="key">The key of the property dictionary</param>
            <returns>The dictionary of properties</returns>
        </member>
        <member name="T:Snowflake.Extensibility.Provisioning.IPluginProvision">
            <summary>
            The plugin provisions provided by the plugin manager
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProvision.Logger">
            <summary>
            Gets the logger for the plugin
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProvision.Properties">
            <summary>
            Gets the plugin's properties
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProvision.ConfigurationStore">
            <summary>
            Gets the plugin's configuration store
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProvision.Name">
            <summary>
            Gets the plugin's name
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProvision.Author">
            <summary>
            Gets the author of the plugin.
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProvision.Description">
            <summary>
            Gets a short description of the plugin
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProvision.Version">
            <summary>
            Gets the version of the plugin
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProvision.ContentDirectory">
            <summary>
            Gets this plugin's content directory
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProvision.ResourceDirectory">
            <summary>
            Gets the plugin's resource directory
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IPluginProvision.CommonResourceDirectory">
            <summary>
            Gets the resource directory common to the plugin's module.
            </summary>
        </member>
        <member name="T:Snowflake.Extensibility.Provisioning.IProvisionedPlugin">
            <summary>
            Represents a plugin initialized with a provision
            A provisioned plugin has access to a logger, configuration options, and a content directory.
            </summary>
        </member>
        <member name="P:Snowflake.Extensibility.Provisioning.IProvisionedPlugin.Provision">
            <summary>
            Gets the plugin provision from the active plugin manager for this instance
            </summary>
        </member>
        <member name="M:Snowflake.Extensibility.Provisioning.IProvisionedPlugin.GetPluginConfiguration">
            <summary>
            Gets the plugin configuration
            </summary>
            <returns>The plugin configuration</returns>
        </member>
        <member name="T:Snowflake.Input.Controller.ControllerElement">
            <summary>
            An enumeration of Stone controller elements
            See https://github.com/SnowflakePowered/stone/blob/master/spec/Controllers.md
            for the specification.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.NoElement">
            <summary>
            No element
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonA">
            <summary>
            The conventional 'A' or confirm face button in a controller
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonB">
            <summary>
            The conventional 'B' or back face button in a controller
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonC">
            <summary>
            The 'C'-labeled, or 3rd button in a 6-face button layout or similar
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonX">
            <summary>
            The conventional 'X' button in a controller
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonY">
            <summary>
            The conventional 'Y' button in a controller
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonZ">
            <summary>
            The 'Z'-labeled or 6th button in a 6-face button layout or similar
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonL">
            <summary>
            The shoulder button registering a digital signal on the left side of the controller
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonR">
            <summary>
            The shoulder button registering a digital signal on the right side of the controller
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonStart">
            <summary>
            The traditional 'Start' button on a conventional controller that usually pauses or starts the game
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonSelect">
            <summary>
            The traditional 'Select' button on a conventional controller that provides auxillary functions
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonGuide">
            <summary>
            A guide button featured on modern controllers that bring up a pause or guide overlay outside of the game itself
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonClickL">
            <summary>
            A depression on the left analog stick that registers a digital signal. Usually labeled as L3
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.ButtonClickR">
            <summary>
            A depression on the Right analog stick that registers a digital signal. Usually labeled as R3
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button0">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons,
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button1">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons,
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button2">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons,
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button3">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons,
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button4">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons,
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button5">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons,
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button6">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons,
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button7">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons,
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button8">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons,
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button9">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons,
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button10">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button11">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button12">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button13">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button14">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button15">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button16">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button17">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button18">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button19">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button20">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button21">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button22">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button23">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button24">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button25">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button26">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button27">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button28">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button29">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button30">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Button31">
            <summary>
            Numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.DirectionalN">
            <summary>
            Directional button indicating the north or upwards direction
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.DirectionalE">
            <summary>
            Directional button indicating the east or rightwards direction
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.DirectionalS">
            <summary>
            Direction button indicating the south or downwards direction
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.DirectionalW">
            <summary>
            Direction button indicating the west or leftwards direction
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.DirectionalNE">
            <summary>
            Auxillary directional button indicating the northeast, or upwards and right direction
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.DirectionalNW">
            <summary>
            Auxillary directional button indicating the northwest, or upwards and left direction
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.DirectionalSE">
            <summary>
            Auxillary directional button indicating the southeast, or downwards and right direction
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.DirectionalSW">
            <summary>
            Auxillary directional button indicating the southwest, or downwards and left direction
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.TriggerLeft">
            <summary>
            An analog shoulder trigger, able to be depressed smoothly with varying degrees of pressure
            from undepressed (0%) to fully depressed (100%), on the left side of the controller, usually marked L2
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.TriggerRight">
            <summary>
            An analog shoulder trigger, able to be depressed smoothly with varying degrees of pressure
            from undepressed (0%) to fully depressed (100%), on the right side of the controller, usually marked R2
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.AxisLeftAnalogPositiveX">
            <summary>
            Rightwards movement of the left analog stick along the X axis (horizontally)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.AxisLeftAnalogNegativeX">
            <summary>
            Leftwards movement of the left analog stick along the X axis (horizontally)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.AxisLeftAnalogPositiveY">
            <summary>
            Upwards movement of the left analog stick along the Y axis (vertically)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.AxisLeftAnalogNegativeY">
            <summary>
            Downwards movement of the left analog stick along the Y axis (vertically)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.AxisRightAnalogPositiveX">
            <summary>
            Rightwards movement of the right analog stick along the X axis (horizontally)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.AxisRightAnalogNegativeX">
            <summary>
            Leftwards movement of the right analog stick along the X axis (horizontally)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.AxisRightAnalogPositiveY">
            <summary>
            Upwards movement of the right analog stick along the Y axis (vertically)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.AxisRightAnalogNegativeY">
            <summary>
            Downwards movement of the right analog stick along the Y axis (vertically)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.RumbleBig">
            <summary>
            A large rumble action (usually through the larger of two rumble motors in a controller
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.RumbleSmall">
            <summary>
            A smaller rumble action (usually through the smaller of two rumble motors in a controller
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Pointer2D">
            <summary>
            A pointing device that can express position in the form of a contiguous set of coordinates on a
            2 dimensional cartesian plane. Examples include a mouse, or the Wii Remote IR
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Pointer3D">
            <summary>
            A pointing device that can express position in the form of a contiguous set of coordinates in 3 dimensional space.
            Examples include the Oculus Touch device, or the Playstation Move
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.PointerAxisPositiveX">
            <summary>
            Continous rightwards movement of a pointer device on the X axis (horizontal)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.PointerAxisNegativeX">
            <summary>
            Continous leftwards movement of a pointer device on the X axis (horizontal)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.PointerAxisPositiveY">
            <summary>
            Continous upwards movement of a pointer device on the Y axis (vertical)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.PointerAxisNegativeY">
            <summary>
            Continous downwards movement of a pointer device on the Y axis (vertical)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.PointerAxisPositiveZ">
            <summary>
            Continous forwards movement of a pointer device on the Z axis
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.PointerAxisNegativeZ">
            <summary>
            Continous backwards movement of a pointer device on the Z axis
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Keyboard">
            <summary>
            A keyboad with an unspecified amount of keys. Intended for emulated computers such as the Commodore 64
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Touchscreen">
            <summary>
            A touch sensitive surface of unspecified size and precision,
            where input can be expressed as a non-contiguous matrix of coordinates on a 2
            dimentional cartesian plane. However, most touchscreens in video game controllers
            are only concerned with a single matrix due to the lack of multi-touch
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNone">
            <summary>
            The None Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyA">
            <summary>
            The A Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyB">
            <summary>
            The B Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyC">
            <summary>
            The C Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyD">
            <summary>
            The D Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyE">
            <summary>
            The E Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF">
            <summary>
            The F Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyG">
            <summary>
            The G Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyH">
            <summary>
            The H Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyI">
            <summary>
            The I Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyJ">
            <summary>
            The J Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyK">
            <summary>
            The K Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyL">
            <summary>
            The L Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyM">
            <summary>
            The M Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyN">
            <summary>
            The N Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyO">
            <summary>
            The O Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyP">
            <summary>
            The P Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyQ">
            <summary>
            The Q Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyR">
            <summary>
            The R Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyS">
            <summary>
            The S Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyT">
            <summary>
            The T Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyU">
            <summary>
            The U Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyV">
            <summary>
            The V Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyW">
            <summary>
            The W Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyX">
            <summary>
            The X Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyY">
            <summary>
            The Y Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyZ">
            <summary>
            The Z Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Key0">
            <summary>
            The 0 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Key1">
            <summary>
            The 1 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Key2">
            <summary>
            The 2 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Key3">
            <summary>
            The 3 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Key4">
            <summary>
            The 4 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Key5">
            <summary>
            The 5 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Key6">
            <summary>
            The 6 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Key7">
            <summary>
            The 7 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Key8">
            <summary>
            The 8 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.Key9">
            <summary>
            The 9 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyEquals">
            <summary>
            The Equals (=) Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyMinus">
            <summary>
            The Minus (-) Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyBackspace">
            <summary>
            The Backspace Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeySpacebar">
            <summary>
            The Spacebar Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyEnter">
            <summary>
            The Enter Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyUp">
            <summary>
            The Up Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyDown">
            <summary>
            The Down Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyLeft">
            <summary>
            The Left Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyRight">
            <summary>
            The Right Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyTab">
            <summary>
            The Tab Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyInsert">
            <summary>
            The Insert Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyDelete">
            <summary>
            The Delete Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyHome">
            <summary>
            The Home Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyEnd">
            <summary>
            The End Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyPageUp">
            <summary>
            The PageUp Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyPageDown">
            <summary>
            The PageDown Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyShift">
            <summary>
            The Shift Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyCtrl">
            <summary>
            The Ctrl Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyAlt">
            <summary>
            The Alt Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyEscape">
            <summary>
            The Escape Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyTilde">
            <summary>
            The Tilde (~) Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyQuote">
            <summary>
            The Quote (') Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeySemicolon">
            <summary>
            The Semicolon (;) Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyComma">
            <summary>
            The Comma (:) Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyPeriod">
            <summary>
            The Period (.) Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeySlash">
            <summary>
            The Slash (/) Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyBracketLeft">
            <summary>
            The Left Bracket ([)Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyBracketRight">
            <summary>
            The Right Brackey (]) Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyBackslash">
            <summary>
            The Backslash (\) Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyRightAlt">
            <summary>
            The Right Alt Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyRightCtrl">
            <summary>
            The Right Ctrl Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyRightShift">
            <summary>
            The Right Shift Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNum0">
            <summary>
            The Num0 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNum1">
            <summary>
            The Num1 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNum2">
            <summary>
            The Num2 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNum3">
            <summary>
            The Num3 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNum4">
            <summary>
            The Num4 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNum5">
            <summary>
            The Num5 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNum6">
            <summary>
            The Num6 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNum7">
            <summary>
            The Num7 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNum8">
            <summary>
            The Num8 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNum9">
            <summary>
            The Num9 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNumPeriod">
            <summary>
            The NumPeriod Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNumPlus">
            <summary>
            The NumPlus Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNumMinus">
            <summary>
            The NumMinus Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyNumEnter">
            <summary>
            The NumEnter Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF1">
            <summary>
            The F1 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF2">
            <summary>
            The F2 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF3">
            <summary>
            The F3 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF4">
            <summary>
            The F4 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF5">
            <summary>
            The F5 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF6">
            <summary>
            The F6 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF7">
            <summary>
            The F7 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF8">
            <summary>
            The F8 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF9">
            <summary>
            The F9 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF10">
            <summary>
            The F10 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF11">
            <summary>
            The F11 Key
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElement.KeyF12">
            <summary>
            The F12 Key
            </summary>
        </member>
        <member name="T:Snowflake.Input.Controller.ControllerElementType">
            <summary>
            Every Stone controller element can have one of any of the following types.
            This means a face button can be treated as a directional button, etc,
            and serves as hinting outside of the semantic meaning of the element keys themselves to the consumer.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.Null">
            <summary>
            This element does not exist. Intended for internal use for consumers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.Button">
            <summary>
            A button, usually with a switch or dome that can be depressed on the controller, exclusing directional buttons
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.Directional">
            <summary>
            A directional button or D-pad button representing one of 8 cardinal directions
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.AxisPositive">
            <summary>
            An axis that increases in value on the number line.
            For example, analog stick movement towards the right, or towards the forward direction.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.AxisNegative">
            <summary>
            An axis that decreases in value on the number line.
            For example, analog stick movement towards the left, or towards the backwards direction.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.Trigger">
            <summary>
            An analog shoulder trigger, able to be depressed smoothly with varying degrees of pressure
            from undepressed (0%) to fully depressed (100%), usually marked L2 or R2
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.Rumble">
            <summary>
            A rumble motor that shakes the controller
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.Keyboard">
            <summary>
            A keyboard of an unspecified amount of keys. Intended for special-case keyboard handling for consumers
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.Pointer">
            <summary>
            A pointing device that can express position in the form of a contiguous set of coordinates on a multi-dimensional cartesian plane.
            Examples include a mouse, or the Wii Remote IR for 2D.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.PointerAxisPositive">
            <summary>
            A pointer axis that increases in value on the number line, where the pointer device itself is
            not limited to axis-based representation. For example, continous right mouse movement.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.PointerAxisNegative">
            <summary>
            A pointer axis that increases in value on the number line, where the pointer device itself
            is not limited to axis-based representation. For example, continous left mouse movement.
            </summary>
        </member>
        <member name="F:Snowflake.Input.Controller.ControllerElementType.Touchscreen">
            <summary>
            A touch sensitive surface of unspecified size and precision,
            where input can be expressed as a non-contiguous matrix of coordinates on a
            2 dimentional cartesian plane. However, most touchscreens in video game controllers
            are only concerned with a single matrix due to the lack of multi-touch support.
            </summary>
        </member>
        <member name="T:Snowflake.Input.Controller.IControllerElementCollection">
            <summary>
            Represents a collection of controller elements in a layout
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonA">
            <summary>
            Gets the conventional 'A' or confirm face button in a controller
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonB">
            <summary>
            Gets the conventional 'B' or back face button in a controller
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonC">
            <summary>
            Gets the 'C'-labeled, or 3rd button in a 6-face button layout or similar
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonX">
            <summary>
            Gets the conventional 'X' button in a controller
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonY">
            <summary>
            Gets the conventional 'Y' button in a controller
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonZ">
            <summary>
            Gets the 'Z'-labeled or 6th button in a 6-face button layout or similar
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonL">
            <summary>
            Gets the shoulder button registering a digital signal on the left side of the controller
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonR">
            <summary>
            Gets the shoulder button registering a digital signal on the right side of the controller
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonStart">
            <summary>
            Gets the traditional 'Start' button on a conventional controller that usually pauses or starts the game
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonSelect">
            <summary>
            Gets the traditional 'Select' button on a conventional controller that provides auxillary functions
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonGuide">
            <summary>
            Gets a guide button featured on modern controllers that bring up a pause or guide overlay outside of the game itself
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonClickL">
            <summary>
            Gets a depression on the left analog stick that registers a digital signal. Usually labeled as L3
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.ButtonClickR">
            <summary>
            Gets a depression on the Right analog stick that registers a digital signal. Usually labeled as R3
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button0">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons { get; }
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button1">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons { get; }
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button2">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons { get; }
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button3">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons { get; }
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button4">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons { get; }
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button5">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons { get; }
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button6">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons { get; }
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button7">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons { get; }
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button8">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons { get; }
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button9">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit
            within the other semantic buttons { get; }
            or as a numeric pad key on certain controllers
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button10">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button11">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button12">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button13">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button14">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button15">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button16">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button17">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button18">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button19">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button20">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button21">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button22">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button23">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button24">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button25">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button26">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button27">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button28">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button29">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button30">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Button31">
            <summary>
            Gets numbered button without semantic value.
            Used as a placeholder for buttons that do not fit within the other semantic buttons.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.DirectionalN">
            <summary>
            Gets directional button indicating the north or upwards direction
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.DirectionalE">
            <summary>
            Gets directional button indicating the east or rightwards direction
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.DirectionalS">
            <summary>
            Gets direction button indicating the south or downwards direction
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.DirectionalW">
            <summary>
            Gets direction button indicating the west or leftwards direction
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.DirectionalNE">
            <summary>
            Gets auxillary directional button indicating the northeast, or upwards and right direction
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.DirectionalNW">
            <summary>
            Gets auxillary directional button indicating the northwest, or upwards and left direction
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.DirectionalSE">
            <summary>
            Gets auxillary directional button indicating the southeast, or downwards and right direction
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.DirectionalSW">
            <summary>
            Gets auxillary directional button indicating the southwest, or downwards and left direction
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.TriggerLeft">
            <summary>
            Gets an analog shoulder trigger, able to be depressed smoothly with varying degrees of pressure
            from undepressed (0%) to fully depressed (100%), on the left side of the controller, usually marked L2
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.TriggerRight">
            <summary>
            Gets an analog shoulder trigger, able to be depressed smoothly with varying degrees of pressure
            from undepressed (0%) to fully depressed (100%), on the right side of the controller, usually marked R2
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.AxisLeftAnalogPositiveX">
            <summary>
            Gets rightwards movement of the left analog stick along the X axis (horizontally)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.AxisLeftAnalogNegativeX">
            <summary>
            Gets leftwards movement of the left analog stick along the X axis (horizontally)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.AxisLeftAnalogPositiveY">
            <summary>
            Gets upwards movement of the left analog stick along the Y axis (vertically)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.AxisLeftAnalogNegativeY">
            <summary>
            Gets downwards movement of the left analog stick along the Y axis (vertically)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.AxisRightAnalogPositiveX">
            <summary>
            Gets rightwards movement of the right analog stick along the X axis (horizontally)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.AxisRightAnalogNegativeX">
            <summary>
            Gets leftwards movement of the right analog stick along the X axis (horizontally)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.AxisRightAnalogPositiveY">
            <summary>
            Gets upwards movement of the right analog stick along the Y axis (vertically)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.AxisRightAnalogNegativeY">
            <summary>
            Gets downwards movement of the right analog stick along the Y axis (vertically)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.RumbleBig">
            <summary>
            Gets a large rumble action (usually through the larger of two rumble motors in a controller
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.RumbleSmall">
            <summary>
            Gets a smaller rumble action (usually through the smaller of two rumble motors in a controller
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Pointer2D">
            <summary>
            Gets a pointing device that can express position in the form of a contiguous set of coordinates on a
            2 dimensional cartesian plane. Examples include a mouse, or the Wii Remote IR
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Pointer3D">
            <summary>
            Gets a pointing device that can express position in the form of a contiguous set of coordinates in 3 dimensional space.
            Examples include the Oculus Touch device, or the Playstation Move
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.PointerAxisPositiveX">
            <summary>
            Gets continous rightwards movement of a pointer device on the X axis (horizontal)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.PointerAxisNegativeX">
            <summary>
            Gets continous leftwards movement of a pointer device on the X axis (horizontal)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.PointerAxisPositiveY">
            <summary>
            Gets continous upwards movement of a pointer device on the Y axis (vertical)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.PointerAxisNegativeY">
            <summary>
            Gets continous downwards movement of a pointer device on the Y axis (vertical)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.PointerAxisPositiveZ">
            <summary>
            Gets continous forwards movement of a pointer device on the Z axis
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.PointerAxisNegativeZ">
            <summary>
            Gets continous backwards movement of a pointer device on the Z axis
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Keyboard">
            <summary>
            Gets a keyboad with an unspecified amount of keys. Intended for emulated computers such as the Commodore 64
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Touchscreen">
            <summary>
            Gets a touch sensitive surface of unspecified size and precision { get; }
            where input can be expressed as a non-contiguous matrix of coordinates on a 2
            dimentional cartesian plane. However, most touchscreens in video game controllers
            are only concerned with a single matrix due to the lack of multi-touch
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementCollection.Item(Snowflake.Input.Controller.ControllerElement)">
            <summary>
            Indexer accessor for the elements in this collection.
            If not present, should return null.
            If attemped to access for a keyboard key, should return the keyboard info element.
            </summary>
            <param name="controllerElement">The controller element to lookup</param>
            <returns>The element info for this layout</returns>
        </member>
        <member name="T:Snowflake.Input.Controller.IControllerElementInfo">
            <summary>
            Represents metadata about a controller element
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementInfo.Label">
            <summary>
            Gets the user friendly label for this element
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerElementInfo.Type">
            <summary>
            Gets the type of element
            </summary>
        </member>
        <member name="T:Snowflake.Input.Controller.IControllerLayout">
            <summary>
            Represents the layout of a controller, real or virtual
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerLayout.LayoutID">
            <summary>
            Gets the identifier or name of the layout.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerLayout.FriendlyName">
            <summary>
            Gets the friendly name of this layout
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerLayout.IsRealDevice">
            <summary>
            Gets a value indicating whether whether or not this is a real device layout or a virtual one.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerLayout.Platforms">
            <summary>
            Gets the platforms this controller supports.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.IControllerLayout.Layout">
            <summary>
            Gets the actual collection of layout elements
            </summary>
        </member>
        <member name="T:Snowflake.Input.Controller.Mapped.IMappedControllerElement">
            <summary>
            Represents a real device controller element mapped onto a virtual device element
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.Mapped.IMappedControllerElement.LayoutElement">
            <summary>
            Gets the virtual element.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.Mapped.IMappedControllerElement.DeviceElement">
            <summary>
            Gets or sets the real element.
            </summary>
        </member>
        <member name="T:Snowflake.Input.Controller.Mapped.IMappedControllerElementCollection">
            <summary>
            Represents a collection of mapped elements.
            Because having properties for each is ambiguous, simply
            iterate over every element or use Linq to get the equivalent element.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.Mapped.IMappedControllerElementCollection.DeviceId">
            <summary>
            Gets the device id of the real device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Controller.Mapped.IMappedControllerElementCollection.ControllerId">
            <summary>
            Gets the controller id of the virtual controller layout
            </summary>
        </member>
        <member name="T:Snowflake.Input.IMappedControllerElementCollectionStore">
             <summary>
             Represents a store of controller mapping profiles <see cref="T:Snowflake.Input.Controller.Mapped.IMappedControllerElementCollection"/>
            
             <para>
             Mapping profiles are stored in standard Stone controller format in a database, keyed on
             the Stone layout name of the emulated controller,
             the device name of the enumerated real controller <see cref="T:Snowflake.Input.Device.IInputDevice"/>,
             and a profile name, user specified and 'default'.
             </para>
            
             <para>
             The IMappedControllerElementCollectionStore does not consider which player and only stores
             a list of profiles for each combination of real to emulated controller.
             </para>
             </summary>
        </member>
        <member name="M:Snowflake.Input.IMappedControllerElementCollectionStore.GetMappingProfile(System.String,System.String,System.String)">
            <summary>
            Gets a corresponding mapping profile for the provided layout, device, and profile.
            </summary>
            <param name="controllerId">The layout or controller ID of the emulated controller</param>
            <param name="deviceId">The enumerated ID of the input device</param>
            <param name="profileName">The name of the profile. Should none be specified, the default profile</param>
            <returns>The mapping profile that maps emulated controller button elements to the device layout</returns>
        </member>
        <member name="M:Snowflake.Input.IMappedControllerElementCollectionStore.GetProfileNames(System.String,System.String)">
            <summary>
            Gets saved profile names for a certain combination of an emulated controller and an input device
            </summary>
            <param name="controllerId">The layout or controller ID of the emulated controller</param>
            <param name="deviceId">The enumerated ID of the input device</param>
            <returns>Saved profile names for this combination</returns>
        </member>
        <member name="M:Snowflake.Input.IMappedControllerElementCollectionStore.SetMappingProfile(Snowflake.Input.Controller.Mapped.IMappedControllerElementCollection,System.String)">
            <summary>
            Sets the corresponding mapping profile for the provided profile name.
            Replaces the entire mapping profile, without checking if it is complete.
            </summary>
            <param name="mappedCollection">The mapping profile to set, including the layout and controller ID</param>
            <param name="profileName">The name of the profile. Should none be specified, the default profile</param>
        </member>
        <member name="T:Snowflake.Input.Device.DeviceType">
            <summary>
            The type of device
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.DeviceType.Other">
            <summary>
            Other or unknown
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.DeviceType.Gamepad">
            <summary>
            Gamepad device
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.DeviceType.Mouse">
            <summary>
            Mouse pointer device
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.DeviceType.Keyboard">
            <summary>
            Keyboard device
            </summary>
        </member>
        <member name="T:Snowflake.Input.Device.IInputDevice">
            <summary>
            A more filtered, usable version of an ILowLevelInputDevice
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.IInputDevice.DeviceId">
            <summary>
            Gets a unique name assigned to this type of device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.IInputDevice.DeviceInfo">
            <summary>
            Gets the device this wrapper belongs to
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.IInputDevice.DeviceIndex">
            <summary>
            Gets the device index differs from the enumeration number that it is the index in a set
            of the device rather than all devices.
            For example, if the device is an Xinput device and is the 3rd input device, this index would be
            2 in the set of input devices.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.IInputDevice.ControllerName">
            <summary>
            Gets a friendly name for the controller (Xbox Controller, or Wii Remote, etc etc)
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.IInputDevice.DeviceLayout">
            <summary>
            Gets the device layout this input device implements
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.IInputDevice.DeviceApi">
            <summary>
            Gets the API this controller uses
            </summary>
        </member>
        <member name="T:Snowflake.Input.Device.IInputEnumerator">
            <summary>
            Enumerates the available devices on the system that implement a certain controller layout
            </summary>
        </member>
        <member name="M:Snowflake.Input.Device.IInputEnumerator.GetConnectedDevices">
            <summary>
            Gets the connected devices associated with this controller layout
            </summary>
            <returns>The input devices associated with this controller layout</returns>
        </member>
        <member name="P:Snowflake.Input.Device.IInputEnumerator.ControllerLayout">
            <summary>
            Gets the default controller layout associated with this input enumerator.
            Usually keyed to the "default" controller layout.
            </summary>
        </member>
        <member name="T:Snowflake.Input.Device.IInputManager">
            <summary>
            Manages input devices from the operating system.
            </summary>
        </member>
        <member name="M:Snowflake.Input.Device.IInputManager.GetAllDevices">
            <summary>
            Get the currently usable gamepads for this computer
            </summary>
            <returns>A list of usable gamepad input devices</returns>
        </member>
        <member name="T:Snowflake.Input.Device.ILowLevelInputDevice">
            <summary>
            A platform agnostic representation of the low-level properties of an input device.
            Implementation is handled by a OS-dependent InputManager implementation.
            Currently this interface supports only the DirectInput/XInput APIs on Windows and udev on Linux. OSX support is not planned.
            Fields that are not used on an OS should be nulled and made unsettable.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DI_ProductName">
            <summary>
            Gets or sets win32 - The ProductName of a DirectInput device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DI_InstanceName">
            <summary>
            Gets or sets win32 - The InstanceName of a DirectInput device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DI_InstanceGUID">
            <summary>
            Gets or sets win32 - The InstanceGUID of a DirectInput device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DI_ProductGUID">
            <summary>
            Gets or sets win32 - The ProductGUID of a DirectInput device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DI_InterfacePath">
            <summary>
            Gets or sets win32 - The InterfacePath of a DirectInput device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DI_JoystickID">
            <summary>
            Gets or sets win32 - The JoystickID of a DirectInput device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DI_ProductID">
            <summary>
            Gets or sets win32 - The ProductID of a DirectInput device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DI_VendorID">
            <summary>
            Gets or sets win32 - The VendorID of a DirectInput device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.XI_IsXInput">
            <summary>
            Gets or sets a value indicating whether win32 - Whether the device is an XInput device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.XI_GamepadIndex">
            <summary>
            Gets or sets win32 - An assumed XInput gamepad index for the device. May not be entirely accurate.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.UDEV_Vendor">
            <summary>
            Gets or sets udev - The vendor of the device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.UDEV_Model">
            <summary>
            Gets or sets udev - The device model
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.UDEV_MountPath">
            <summary>
            Gets or sets udev - The mount point of the device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DI_DeviceType">
            <summary>
            Gets or sets the type of device
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DI_EnumerationNumber">
            <summary>
            Gets or sets the order in which this DirectInput gamepad was enumerated.
            This is given in the order that the inputmanager provides and may not be reliable.
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.XI_IsConnected">
            <summary>
            Gets or sets whether or not the XInput Device is connected
            </summary>
        </member>
        <member name="P:Snowflake.Input.Device.ILowLevelInputDevice.DiscoveryApi">
            <summary>
            Gets or sets the API used to discover this device
            </summary>
        </member>
        <member name="T:Snowflake.Input.Device.InputApi">
            <summary>
            The input API of a device
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.InputApi.XInput">
            <summary>
            XInput (Windows)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.InputApi.DirectInput">
            <summary>
            DirectInput (Windows)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.InputApi.RawInput">
            <summary>
            RawInput (Windows)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.InputApi.Udev">
            <summary>
            Udev (Linux)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.InputApi.WndProc">
            <summary>
            WndProc messaging (Windows)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.InputApi.HID">
            <summary>
            Human Interface Device interface (Windows)
            </summary>
        </member>
        <member name="F:Snowflake.Input.Device.InputApi.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Snowflake.Loader.IComposable">
            <summary>
            A container for plugins to initialize in.
            All composable objects must implement this interface, and register their plugins inside the
            Compose method.
            </summary>
        </member>
        <member name="M:Snowflake.Loader.IComposable.Compose(Snowflake.Loader.IModule,Snowflake.Loader.IServiceRepository)">
            <summary>
            This method is called upon initialization of your plugin assembly.
            In this method, initialize your plugin objects and register them to the plugin manager to expose access to Snowflake.
            </summary>
            <param name="composableModule">The module metadata of the loading module.</param>
            <param name="serviceContainer">The core instance that is injected by the plugin manager</param>
            <see cref="M:Snowflake.Services.IPluginManager.Register``1(``0)"/>
        </member>
        <member name="T:Snowflake.Loader.IModule">
            <summary>
            Represents the module information for a module folder.
            </summary>
        </member>
        <member name="P:Snowflake.Loader.IModule.Author">
            <summary>
            Gets the author of the module as specified in the module manifest.
            </summary>
        </member>
        <member name="P:Snowflake.Loader.IModule.Entry">
            <summary>
            Gets the entrypoint of the module as specified in the module manifest.
            </summary>
        </member>
        <member name="P:Snowflake.Loader.IModule.Loader">
            <summary>
            Gets the loader of the module as specified in the module manifest.
            </summary>
        </member>
        <member name="P:Snowflake.Loader.IModule.ModuleDirectory">
            <summary>
            Gets the directory whether the module contents folder is contained.
            </summary>
        </member>
        <member name="P:Snowflake.Loader.IModule.ContentsDirectory">
            <summary>
            Gets the directory where the module contents are located.
            </summary>
        </member>
        <member name="P:Snowflake.Loader.IModule.Name">
            <summary>
            Gets the name of the module.
            </summary>
        </member>
        <member name="P:Snowflake.Loader.IModule.Version">
            <summary>
            The version of this module.
            </summary>
        </member>
        <member name="T:Snowflake.Loader.IModuleEnumerator">
            <summary>
            Enumerates all modules installed in the folder.
            </summary>
        </member>
        <member name="P:Snowflake.Loader.IModuleEnumerator.Modules">
            <summary>
            Gets all the modules installed in the folder.
            </summary>
        </member>
        <member name="T:Snowflake.Loader.IServiceRepository">
            <summary>
            Provides access to imported services.
            </summary>
        </member>
        <member name="M:Snowflake.Loader.IServiceRepository.Get``1">
            <summary>
            Gets the given service
            </summary>
            <typeparam name="T">The requested service</typeparam>
            <returns>The available services</returns>
            <exception cref="T:System.InvalidOperationException">
            The service has not been imported or you do not have permissions to access the service.
            </exception>
        </member>
        <member name="P:Snowflake.Loader.IServiceRepository.Services">
            <summary>
            Gets a list of available service types.
            </summary>
        </member>
        <member name="T:Snowflake.Persistence.ISimpleKeyValueStore">
            <summary>
            A simple key value object store
            </summary>
        </member>
        <member name="M:Snowflake.Persistence.ISimpleKeyValueStore.GetObject``1(System.String)">
            <summary>
            Gets an object from the key value store
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="key">The key stored</param>
            <returns>The object</returns>
        </member>
        <member name="M:Snowflake.Persistence.ISimpleKeyValueStore.GetObjects``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets multiple objects of identical type given a list of keys
            </summary>
            <typeparam name="T">The type of the objects</typeparam>
            <param name="keys">The key stored</param>
            <returns>The keyed dictionary of the returned objects</returns>
        </member>
        <member name="M:Snowflake.Persistence.ISimpleKeyValueStore.GetAllObjects``1">
            <summary>
            Gets multiple objects of a identical type
            </summary>
            <typeparam name="T">The type of the objects</typeparam>
            <returns>The keyed dictionary of the returned objects</returns>
        </member>
        <member name="M:Snowflake.Persistence.ISimpleKeyValueStore.InsertObject``1(System.String,``0,System.Boolean)">
            <summary>
            Inserts or updates an object into the key value store
            </summary>
            <typeparam name="T">The type of object to insert</typeparam>
            <param name="key">The key to insert with</param>
            <param name="value">The object to insert</param>
            <param name="ignoreIfExistent">Quietly ignore the insert if the object already exists</param>
        </member>
        <member name="M:Snowflake.Persistence.ISimpleKeyValueStore.InsertObjects``1(System.Collections.Generic.IDictionary{System.String,``0},System.Boolean)">
            <summary>
            Inserts multiple objects of type T into the store
            </summary>
            <typeparam name="T">The type of the objects to insert</typeparam>
            <param name="keyValuePairs">A dictionary with the objects to insert</param>
            <param name="ignoreIfExistent">Quietly ignore the insert if the object already exists</param>
        </member>
        <member name="M:Snowflake.Persistence.ISimpleKeyValueStore.DeleteObject(System.String)">
            <summary>
            Deletes an object
            </summary>
            <param name="key">The key to delete</param>
        </member>
        <member name="M:Snowflake.Persistence.ISimpleKeyValueStore.DeleteObjects(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes multiple objects
            </summary>
            <param name="keys">The keys to delete</param>
        </member>
        <member name="M:Snowflake.Persistence.ISimpleKeyValueStore.DeleteObjects``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes multiple objects of a type with the keys
            </summary>
            <param name="keys">The keys to delete</param>
        </member>
        <member name="M:Snowflake.Persistence.ISimpleKeyValueStore.DeleteAllObjects``1">
            <summary>
            Deletes all objects of a type
            </summary>
        </member>
        <member name="T:Snowflake.Persistence.ISqlDatabase">
            <summary>
            Represents a generic SQL database.
            Usually SQLite backed.
            </summary>
        </member>
        <member name="P:Snowflake.Persistence.ISqlDatabase.DatabaseName">
            <summary>
            Gets the file or connection name.
            </summary>
        </member>
        <member name="M:Snowflake.Persistence.ISqlDatabase.CreateTable(System.String,System.String[])">
            <summary>
            Creates a table with the given name and column rows
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="columns">The column directives.</param>
        </member>
        <member name="M:Snowflake.Persistence.ISqlDatabase.Execute(System.Action{System.Data.IDbConnection})">
            <summary>
            Executes an atomic query function on the database.
            </summary>
            <param name="queryFunction">The query function on the database</param>
        </member>
        <member name="M:Snowflake.Persistence.ISqlDatabase.Execute(System.String,System.Object)">
            <summary>
            Executes a parameterized string query given an object representing paramaters.
            </summary>
            <param name="query">The SQL string query</param>
            <param name="param">The object containing the parameters</param>
        </member>
        <member name="M:Snowflake.Persistence.ISqlDatabase.Query``1(System.Func{System.Data.IDbConnection,``0})">
            <summary>
            Executes a typed query given a query function that returns the object.
            </summary>
            <typeparam name="T">The return type of the object</typeparam>
            <param name="queryFunction">The query function that returns the object</param>
            <returns></returns>
        </member>
        <member name="M:Snowflake.Persistence.ISqlDatabase.Query``1(System.String,System.Object)">
            <summary>
            Executes a string query that returns an enumerable of matching objects.
            </summary>
            <typeparam name="T">The return type of the objects</typeparam>
            <param name="query">The parameterized string query.</param>
            <param name="param">The object containing the parameters</param>
            <returns>An enumerable or matching objects</returns>
        </member>
        <member name="M:Snowflake.Persistence.ISqlDatabase.QueryFirstOrDefault``1(System.String,System.Object)">
            <summary>
            Returns the first object given the string query, or null if no matching objects found.
            </summary>
            <typeparam name="T">The return type of the objects</typeparam>
            <param name="query">The parameterized string query.</param>
            <param name="param">The object containing the parameters</param>
            <returns>The first object given the string query, or null if no matching objects found.</returns>
        </member>
        <member name="M:Snowflake.Persistence.ISqlDatabase.GetConnection">
            <summary>
            Gets a connection to the database
            </summary>
            <returns></returns>
        </member>
        <member name="T:Snowflake.Platform.IBiosFile">
            <summary>
            Represents a BIOS file of a Stone <see cref="T:Snowflake.Platform.IPlatformInfo"/> definition.
            </summary>
        </member>
        <member name="P:Snowflake.Platform.IBiosFile.FileName">
            <summary>
            Gets the canonical file name of the BIOS file.
            </summary>
        </member>
        <member name="P:Snowflake.Platform.IBiosFile.Md5Hash">
            <summary>
            Gets the unique MD5 hash of the BIOS file.
            </summary>
        </member>
        <member name="T:Snowflake.Platform.IPlatformInfo">
            <summary>
            Represents an emulated console or a platform in Snowflake.
            </summary>
        </member>
        <member name="P:Snowflake.Platform.IPlatformInfo.PlatformID">
            <summary>
            Gets the id of the platform that this object is related to
            </summary>
        </member>
        <member name="P:Snowflake.Platform.IPlatformInfo.FriendlyName">
            <summary>
            Gets the friendly name of this platform
            </summary>
        </member>
        <member name="P:Snowflake.Platform.IPlatformInfo.Metadata">
            <summary>
            Gets or sets any metadata that is attached to this object, such as descriptions
            </summary>
        </member>
        <member name="P:Snowflake.Platform.IPlatformInfo.FileTypes">
            <summary>
            Gets the file types ROMs of this platform are known to have.
            Included as a mapping of file extension to mime type application/x-romfile-*
            </summary>
        </member>
        <member name="P:Snowflake.Platform.IPlatformInfo.BiosFiles">
            <summary>
            Gets the list of bios files for this platform
            </summary>
        </member>
        <member name="P:Snowflake.Platform.IPlatformInfo.MaximumInputs">
            <summary>
            Gets the maximum amount of inputs that are physically possible for this platform to have.
            </summary>
        </member>
        <member name="T:Snowflake.Records.File.FileMetadataKeys">
            <summary>
            A list of standard keys for game metadata
            </summary>
        </member>
        <member name="F:Snowflake.Records.File.FileMetadataKeys.FileHashCrc32">
            <summary>
            The crc32 of the file
            </summary>
        </member>
        <member name="F:Snowflake.Records.File.FileMetadataKeys.FileHashMd5">
            <summary>
            The md5 of the file
            </summary>
        </member>
        <member name="F:Snowflake.Records.File.FileMetadataKeys.FileHashSha1">
            <summary>
            The sha1 of the file
            </summary>
        </member>
        <member name="F:Snowflake.Records.File.FileMetadataKeys.RomRegion">
            <summary>
            The region of the rom.
            </summary>
        </member>
        <member name="F:Snowflake.Records.File.FileMetadataKeys.RomPlatform">
            <summary>
            The stone platform id of the rom file
            </summary>
        </member>
        <member name="F:Snowflake.Records.File.FileMetadataKeys.RomInternalName">
            <summary>
            The internal name of the ROM.
            </summary>
        </member>
        <member name="F:Snowflake.Records.File.FileMetadataKeys.RomSerial">
            <summary>
            The serial of the ROM
            </summary>
        </member>
        <member name="F:Snowflake.Records.File.FileMetadataKeys.RomCanonicalTitle">
            <summary>
            The canonical title of a ROM from the shiragame database
            </summary>
        </member>
        <member name="F:Snowflake.Records.File.FileMetadataKeys.RomIsAmbiguousIdentification">
            <summary>
            The ROM was not determined for sure by a <see cref="!:IScrapeEngine"/>
            </summary>
        </member>
        <member name="F:Snowflake.Records.File.FileMetadataKeys.RomZipRunnableFilename">
            <summary>
            The filename of the runnable binary in a zip file.
            </summary>
        </member>
        <member name="T:Snowflake.Records.File.IFileLibrary">
            <summary>
            A library to store file records that are related
            </summary>
        </member>
        <member name="M:Snowflake.Records.File.IFileLibrary.Get(System.String)">
            <summary>
            Gets a file by its path
            </summary>
            <param name="filePath">The path to look for</param>
            <returns>The file path</returns>
        </member>
        <member name="T:Snowflake.Records.File.IFileRecord">
            <summary>
            Represents a file on disk.
            </summary>
        </member>
        <member name="P:Snowflake.Records.File.IFileRecord.MimeType">
            <summary>
            Gets the mimetype of the file
            </summary>
        </member>
        <member name="P:Snowflake.Records.File.IFileRecord.FilePath">
            <summary>
            Gets the file path of the file
            </summary>
        </member>
        <member name="T:Snowflake.Records.Game.GameMetadataKeys">
            <summary>
            A list of standard keys for game metadata
            </summary>
        </member>
        <member name="F:Snowflake.Records.Game.GameMetadataKeys.Platform">
            <summary>
            The platform of the game
            </summary>
        </member>
        <member name="F:Snowflake.Records.Game.GameMetadataKeys.Title">
            <summary>
            The title of the game
            </summary>
        </member>
        <member name="F:Snowflake.Records.Game.GameMetadataKeys.Description">
            <summary>
            A game description
            </summary>
        </member>
        <member name="F:Snowflake.Records.Game.GameMetadataKeys.Region">
            <summary>
            The game's region
            </summary>
        </member>
        <member name="F:Snowflake.Records.Game.GameMetadataKeys.Publisher">
            <summary>
            The game's publisher
            </summary>
        </member>
        <member name="F:Snowflake.Records.Game.GameMetadataKeys.ReleaseDate">
            <summary>
            The game's release date
            </summary>
        </member>
        <member name="T:Snowflake.Records.Game.IGameLibrary">
            <summary>
            A database used to store game information
            </summary>
        </member>
        <member name="P:Snowflake.Records.Game.IGameLibrary.FileLibrary">
            <summary>
            Gets the file library that holds the file information for this game.
            </summary>
        </member>
        <member name="M:Snowflake.Records.Game.IGameLibrary.GetGamesByTitle(System.String)">
            <summary>
            Gets a list of games with a certain matching name
            </summary>
            <param name="nameSearch">The name of the game to search by</param>
            <returns>A list of games with matching titles</returns>
        </member>
        <member name="M:Snowflake.Records.Game.IGameLibrary.GetGamesByPlatform(System.String)">
            <summary>
            Gets all the games for a certain platform id
            </summary>
            <param name="platformId">The stone platform id to search for</param>
            <returns>All games in a certain platform</returns>
        </member>
        <member name="T:Snowflake.Records.Game.IGameRecord">
            <summary>
            Represents a game as a collection of <see cref="T:Snowflake.Records.Metadata.IRecordMetadata"/> and <see cref="T:Snowflake.Records.File.IFileRecord"/>s
            </summary>
        </member>
        <member name="P:Snowflake.Records.Game.IGameRecord.PlatformID">
            <summary>
            Gets the Stone platform ID of this record
            </summary>
        </member>
        <member name="P:Snowflake.Records.Game.IGameRecord.Title">
            <summary>
            Gets the title of the game
            (must be equivalent to &quot;game_title&quot; <see cref="P:Snowflake.Records.IRecord.Metadata"/>)
            </summary>
        </member>
        <member name="P:Snowflake.Records.Game.IGameRecord.Files">
            <summary>
            Gets all executable files should be mimetype application/romfile-*,
            or application/romfile-*+zip if in zip format.
            </summary>
        </member>
        <member name="T:Snowflake.Records.ILibrary`1">
            <summary>
            Represents a generic library of metadata assignable items
            </summary>
            <typeparam name="T">The type of metadata assignable item</typeparam>
        </member>
        <member name="M:Snowflake.Records.ILibrary`1.Set(`0)">
            <summary>
            Adds or updates a record to the library
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:Snowflake.Records.ILibrary`1.Set(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds or updates a list of records to the library
            </summary>
            <param name="records"></param>
        </member>
        <member name="M:Snowflake.Records.ILibrary`1.Remove(`0)">
            <summary>
            Removes a record from the library
            </summary>
            <param name="record">The record to remove</param>
        </member>
        <member name="M:Snowflake.Records.ILibrary`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes a set of records from the library
            </summary>
            <param name="records">The records to remove</param>
        </member>
        <member name="M:Snowflake.Records.ILibrary`1.Remove(System.Guid)">
            <summary>
            Removes a record by Guid lookup
            </summary>
            <param name="guid">The guid of the record</param>
        </member>
        <member name="M:Snowflake.Records.ILibrary`1.Remove(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Remove a set of IDs
            </summary>
            <param name="guids"></param>
        </member>
        <member name="M:Snowflake.Records.ILibrary`1.Get(System.Guid)">
            <summary>
            Gets a record from the libary
            </summary>
            <param name="guid">The guid to get</param>
            <returns>The record</returns>
        </member>
        <member name="M:Snowflake.Records.ILibrary`1.Get(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets multiple records from the library
            </summary>
            <param name="guids">The list of guids</param>
            <returns></returns>
        </member>
        <member name="M:Snowflake.Records.ILibrary`1.GetAllRecords">
            <summary>
            Gets all the records in the library
            </summary>
            <returns></returns>
        </member>
        <member name="T:Snowflake.Records.IRecord">
            <summary>
            Represents a class that can have metadata assigned to it.
            </summary>
        </member>
        <member name="P:Snowflake.Records.IRecord.Metadata">
            <summary>
            Gets the metadata related to this metadata
            </summary>
        </member>
        <member name="P:Snowflake.Records.IRecord.Guid">
            <summary>
            Gets a metadata assignable must have a guid.
            </summary>
        </member>
        <member name="T:Snowflake.Records.IRecordLibrary`1">
            <summary>
            Represents a library of records backed by a metadata store
            </summary>
            <typeparam name="T">A record type</typeparam>
        </member>
        <member name="M:Snowflake.Records.IRecordLibrary`1.SearchByMetadata(System.String,System.String)">
            <summary>
            Executes a `LIKE` search on a metadata value
            </summary>
            <param name="key">The key to search for</param>
            <param name="likeValue">The fuzzy search value</param>
            <returns></returns>
        </member>
        <member name="M:Snowflake.Records.IRecordLibrary`1.GetByMetadata(System.String,System.String)">
            <summary>
            Gets game records with exact metadata value match.
            </summary>
            <param name="key">The metadata key to search for</param>
            <param name="exactValue">The exact metadata value match</param>
            <returns></returns>
        </member>
        <member name="P:Snowflake.Records.IRecordLibrary`1.MetadataLibrary">
            <summary>
            Gets the metadata store associated with this library.
            </summary>
        </member>
        <member name="P:Snowflake.Records.IRecordLibrary`1.LibraryName">
            <summary>
            Gets the name of this library.
            </summary>
        </member>
        <member name="T:Snowflake.Records.Metadata.IMetadatable`1">
            <summary>
            Represents a class that can be converted to metadata
            </summary>
            <typeparam name="T">The class to convert</typeparam>
        </member>
        <member name="M:Snowflake.Records.Metadata.IMetadatable`1.ToMetadata">
            <summary>
            Converts the class into a metadatable representation, keyed on the metadata name.
            </summary>
            <returns>An enumerable of metadata</returns>
        </member>
        <member name="M:Snowflake.Records.Metadata.IMetadatable`1.FromMetadata(System.Collections.Generic.IDictionary{System.String,Snowflake.Records.Metadata.IRecordMetadata})">
            <summary>
            Converts a collection of metadata to a class
            </summary>
            <param name="metadata">The metadata</param>
            <returns>The metadata</returns>
        </member>
        <member name="T:Snowflake.Records.Metadata.IMetadataCollection">
            <summary>
            Represents a collection of metadata
            </summary>
        </member>
        <member name="P:Snowflake.Records.Metadata.IMetadataCollection.Record">
            <summary>
            Gets the record guid this metadata collection is set to.
            </summary>
        </member>
        <member name="P:Snowflake.Records.Metadata.IMetadataCollection.Item(System.String)">
            <summary>
            The value of this metadata.
            If you want to get the raw records, enumerate <see cref="P:System.Collections.Generic.IDictionary`2.Values"/>
            </summary>
            <param name="key">The metadata key</param>
            <returns>The value of the metadata</returns>
        </member>
        <member name="P:Snowflake.Records.Metadata.IMetadataCollection.Item(System.Guid)">
            <summary>
            Gets a metadata with its guid
            </summary>
            <param name="guid">The guid of the metadata</param>
            <returns>The requested metadata</returns>
        </member>
        <member name="M:Snowflake.Records.Metadata.IMetadataCollection.Add(Snowflake.Records.Metadata.IRecordMetadata)">
            <summary>
            Adds a metadata value
            </summary>
            <param name="recordMetadata">The value to add</param>
        </member>
        <member name="M:Snowflake.Records.Metadata.IMetadataCollection.Add(System.String,System.String)">
            <summary>
            Adds a record metadata with the specified key and value
            </summary>
            <param name="key">The key of the metadata</param>
            <param name="value">The value of the metadata</param>
        </member>
        <member name="M:Snowflake.Records.Metadata.IMetadataCollection.Add(System.Collections.Generic.IDictionary{System.String,Snowflake.Records.Metadata.IRecordMetadata})">
            <summary>
            Copy the metadata of one collection to another, changing the guid of the metadata.
            </summary>
            <param name="existingMetadata">The existing metadata</param>
        </member>
        <member name="T:Snowflake.Records.Metadata.IMetadataLibrary">
            <summary>
            Represents a database of metadata
            </summary>
        </member>
        <member name="M:Snowflake.Records.Metadata.IMetadataLibrary.GetAllForElement(System.Guid)">
            <summary>
            Gets all metadata with a specific target guid
            </summary>
            <param name="target">The element target</param>
            <returns>All the metadata for the target element</returns>
        </member>
        <member name="M:Snowflake.Records.Metadata.IMetadataLibrary.Search(System.String,System.String)">
            <summary>
            Executes a `LIKE` search on a metadata value
            </summary>
            <param name="key">The key to search for</param>
            <param name="likeValue">The fuzzy search value</param>
            <returns>All the metadata with matching key/values</returns>
        </member>
        <member name="M:Snowflake.Records.Metadata.IMetadataLibrary.Get(System.String,System.String)">
            <summary>
            Gets metadata with exact metadata value match.
            </summary>
            <param name="key">The metadata key to search for</param>
            <param name="exactValue">The exact metadata value match</param>
            <returns>All the metadata with matching key/values</returns>
        </member>
        <member name="M:Snowflake.Records.Metadata.IMetadataLibrary.Get(System.String,System.Guid)">
            <summary>
            Gets the keyed metadata for a record
            </summary>
            <param name="key">The metadata key</param>
            <param name="recordId">The metadata record Id</param>
            <returns></returns>
        </member>
        <member name="T:Snowflake.Records.Metadata.IRecordMetadata">
            <summary>
            Represents a piece of metadata for a game or a file.
            A record metadata is equal to another instance if the key and record guid are the same,
            or if otherwise the metadata guid are the same.
            <br/>
            A record metadata with the same key and record guid should produce the same guid every time,
            equality is not dependent on the value of the metadata.
            </summary>
        </member>
        <member name="P:Snowflake.Records.Metadata.IRecordMetadata.Key">
            <summary>
            Gets the key of the metadata
            </summary>
        </member>
        <member name="P:Snowflake.Records.Metadata.IRecordMetadata.Value">
            <summary>
            Gets the value of the metadata
            </summary>
        </member>
        <member name="P:Snowflake.Records.Metadata.IRecordMetadata.Guid">
            <summary>
            Gets the guid of the metadata.
            A metadata with the same key and element guid should produce the same Guidv3, with the
            UUID v3 namespace being the element guid.
            </summary>
        </member>
        <member name="P:Snowflake.Records.Metadata.IRecordMetadata.Record">
            <summary>
            Gets the guid of the element of the metadata
            </summary>
        </member>
        <member name="T:Snowflake.Romfile.IFileSignature">
            <summary>
            Represents the ROM file signature
            </summary>
        </member>
        <member name="P:Snowflake.Romfile.IFileSignature.HeaderSignature">
            <summary>
            Gets the byte array from byte position 0 containing the header or other identifier of the ROM.
            Usually the first 1024 bytes.
            </summary>
        </member>
        <member name="M:Snowflake.Romfile.IFileSignature.HeaderSignatureMatches(System.IO.Stream)">
            <summary>
            Whether or not the header signature of a file matches this platform's ROM type.
            To handle multiple types of ROMs, use a series of ifs or an switch.
            </summary>
            <remarks>
            Never close <paramref name="fileContents"/>. Exceptions can be thrown freely without being handled,
            and will be treated as an invalid result (false).
            </remarks>
            <param name="fileContents">The contents of the ROM</param>
            <returns>If this ROM is executable data for this platform, it should return true.</returns>
        </member>
        <member name="M:Snowflake.Romfile.IFileSignature.GetSerial(System.IO.Stream)">
            <summary>
            Gets the game serial from the file signature if possible
            <param name="fileContents">The contents of the ROM</param>
            </summary>
            <remarks>
            Never close <paramref name="fileContents"/>. Exceptions can be thrown freely without being handled,
            and will be treated as an invalid result (null).
            </remarks>
        </member>
        <member name="M:Snowflake.Romfile.IFileSignature.GetInternalName(System.IO.Stream)">
            <summary>
            Gets the internal name of the ROM if possible
            <param name="fileContents">The contents of the ROM</param>
            </summary>
            <remarks>
            Never close <paramref name="fileContents"/>. Exceptions can be thrown freely without being handled,
            and will be treated as an invalid result (null).
            </remarks>
        </member>
        <member name="T:Snowflake.Romfile.IFileSignatureMatcher">
            <summary>
            An engine that looks up file signature matches
            </summary>
        </member>
        <member name="M:Snowflake.Romfile.IFileSignatureMatcher.GetPossibleMimetypes(System.String)">
            <summary>
            Gets possible mimetypes given a file extension
            </summary>
            <param name="fileExtension">The file extension, including the dot, to lookup</param>
            <returns>Possible sotne mimetypes</returns>
        </member>
        <member name="M:Snowflake.Romfile.IFileSignatureMatcher.RegisterFileSignature(System.String,Snowflake.Romfile.IFileSignature)">
            <summary>
            Registers a file signature to the matcher
            </summary>
            <param name="mimetype">The mimetype the matcher matches for</param>
            <param name="fileSignature">The file signature to register</param>
        </member>
        <member name="M:Snowflake.Romfile.IFileSignatureMatcher.GetInfo(System.String,System.IO.Stream)">
            <summary>
            Gets rom information using registered file signatures
            </summary>
            <param name="fileName">The file name of the ROM</param>
            <param name="fileContents">The contents of the ROM</param>
            <returns>Information from the ROM</returns>
        </member>
        <member name="T:Snowflake.Romfile.IRomFileInfo">
            <summary>
            Represents information retrieved from the contents of a rom through File Signatures
            <see cref="T:Snowflake.Romfile.IFileSignature"/>
            </summary>
        </member>
        <member name="P:Snowflake.Romfile.IRomFileInfo.Mimetype">
            <summary>
            Gets the stone mimetype of the ROM.
            </summary>
        </member>
        <member name="P:Snowflake.Romfile.IRomFileInfo.Serial">
            <summary>
            Gets the serial of the ROM, if available
            </summary>
        </member>
        <member name="P:Snowflake.Romfile.IRomFileInfo.InternalName">
            <summary>
            Gets the internal name of the ROM, if available
            </summary>
        </member>
        <member name="T:Snowflake.Romfile.IStructuredFilename">
            <summary>
            Represents a structured filename of a ROM according to any of either NoIntro, TOSEC or GoodTools conventions.
            Any other data besides title, year, and region is discarded.
            </summary>
        </member>
        <member name="P:Snowflake.Romfile.IStructuredFilename.NamingConvention">
            <summary>
            Gets the naming convention of the filename.
            </summary>
            <remarks>
            This value is determined by the format of the filename's country (region code) (NOT LANGUAGE)
            TOSEC uses ISO 3166-1 alpha-2 2-letter country codes seperated by a hyphen.
            GoodTools uses it's own 1 or 2 letter format
            No-Intro uses full-country names that seem to follow their own conventions.
            </remarks>
        </member>
        <member name="P:Snowflake.Romfile.IStructuredFilename.Title">
            <summary>
            Gets the title of the game according to the filename.
            May or may not differ from the final queryable filename.
            This title is always in ASCII. Japanese and other languages are romanized in accordance with the filename's convention.
            Version information is discarded.
            </summary>
        </member>
        <member name="P:Snowflake.Romfile.IStructuredFilename.Year">
            <summary>
            Gets the year of the ROM (0 if No-Intro)
            </summary>
            <remarks>
            Unreliable as the No-Intro convention does not mandate a year.
            Begins with either 19XX or 20XX if TOSEC or GoodTools.
            This is a string as unknown dates are serialized as 19XX or 20XX.
            Does not contain any other date information such as month and day, this data is discarded
            </remarks>
        </member>
        <member name="P:Snowflake.Romfile.IStructuredFilename.RegionCode">
             <summary>
             Gets the region code of the game in format ISO 3166-1 alpha-2 2-letter country codes seperated by a hyphen.
             </summary>
             <remarks>
             This is converted from whatever format the original naming convention uses. TOSEC values are taken verbatim if under 2 codes,
             while No-Intro and GoodTools are converted via lookup=table.
            
             If TOSEC values use more than 3 codes, or if the value for GoodTools is W, Unl, PD, or Unk, or if the No-Intro value is World or Unknown,
             this value is serialized into the ISO code 'ZZ' for Unknown or Invalid Territory.
             </remarks>
        </member>
        <member name="P:Snowflake.Romfile.IStructuredFilename.OriginalFilename">
            <summary>
            Gets the source filename
            </summary>
        </member>
        <member name="T:Snowflake.Romfile.NamingConvention">
            <summary>
            Types of filename conventions
            </summary>
        </member>
        <member name="F:Snowflake.Romfile.NamingConvention.NoIntro">
            <summary>
            No-Intro Naming Convention
            </summary>
        </member>
        <member name="F:Snowflake.Romfile.NamingConvention.TheOldSchoolEmulationCenter">
            <summary>
            TOSEC Naming Convention
            </summary>
        </member>
        <member name="F:Snowflake.Romfile.NamingConvention.GoodTools">
            <summary>
            GoodTools naming convention
            </summary>
        </member>
        <member name="F:Snowflake.Romfile.NamingConvention.Unknown">
            <summary>
            Unknown naming convention, possibly invalid filename
            </summary>
        </member>
        <member name="T:Snowflake.Scraping.Extensibility.AttachTarget">
            <summary>
            Specifies the seed to which the results are attached or applied to.
            In the case of <see cref="T:Snowflake.Scraping.Extensibility.DirectiveAttribute"/>, specifies the
            seed with which the directive applies to.
            </summary>
        </member>
        <member name="F:Snowflake.Scraping.Extensibility.AttachTarget.Target">
            <summary>
            Attaches results to the target, or otherwise directs focus to the
            specified target seed.
            In other words, results will be children of the target seed node.
            </summary>
        </member>
        <member name="F:Snowflake.Scraping.Extensibility.AttachTarget.TargetParent">
            <summary>
            Attaches results to the parent of the target, or otherwise
            directs focus to the parent of the specified target seed.
            In other words, results will be siblings of the target seed node.
            If the target has no parent, results will be attached to the root seed.
            </summary>
        </member>
        <member name="F:Snowflake.Scraping.Extensibility.AttachTarget.Root">
            <summary>
            Attaches results to the root seed, or otherwise
            directs focus to the root seed.
            In other words, results will be children of the root seed node.
            </summary>
        </member>
        <member name="T:Snowflake.Scraping.Extensibility.Directive">
            <summary>
            Specifies the requirements of a directive evaluated when
            deciding if a <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/> is run or not.
            </summary>
        </member>
        <member name="F:Snowflake.Scraping.Extensibility.Directive.Requires">
            <summary>
            Indicates that a child of the specified type on the specified <see cref="T:Snowflake.Scraping.Extensibility.AttachTarget"/>
            MUST exist before this scraper is run. Seed types of this directive are guaranteed to
            be available when this scraper is run.
            </summary>
        </member>
        <member name="F:Snowflake.Scraping.Extensibility.Directive.Excludes">
            <summary>
            Indicates that a child of the specified type on the specified <see cref="T:Snowflake.Scraping.Extensibility.AttachTarget"/>
            MUST NOT exist before this scraper is run. Allows for fallbacks and exclusions on multiple but
            similar scrapers that can take advantage of pre-existing data.
            Note that an exclusion applies once when all <see cref="F:Snowflake.Scraping.Extensibility.Directive.Requires"/> have been fulfilled.
            If the state of the seed tree excludes this scraper after it has already been run,
            the result will exist for the remainder of the <see cref="T:Snowflake.Scraping.IScrapeJob"/> unless it is
            culled by an <see cref="T:Snowflake.Scraping.Extensibility.ICuller"/>.
            </summary>
        </member>
        <member name="T:Snowflake.Scraping.Extensibility.DirectiveAttribute">
            <summary>
            Specifies a directive on a <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/> that determines
            when and what information it must have access to before it is run.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.DirectiveAttribute.Target">
            <summary>
            Gets the target of the directive. All seeds of this type are
            examined when evaluating the directive.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.DirectiveAttribute.Directive">
            <summary>
            Gets the directive action, whether or not this directive means to run
            the <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/> if the specified child type is available on
            the <see cref="P:Snowflake.Scraping.Extensibility.DirectiveAttribute.Target"/>, or whether not exclude and not run if the specified
            child type exists on the target.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.DirectiveAttribute.Type">
            <summary>
            Gets the child type to evaluate this directive on
            </summary>
        </member>
        <member name="T:Snowflake.Scraping.Extensibility.ICuller">
            <summary>
            A <see cref="T:Snowflake.Scraping.Extensibility.ICuller"/> filters seeds that remain in consideration
            when the <see cref="T:Snowflake.Scraping.ISeedRootContext"/> is traversed to produce a result.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.ICuller.TargetType">
            <summary>
            Gets the type of <see cref="T:Snowflake.Scraping.ISeed"/> that this culler examines.
            </summary>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.ICuller.Filter(System.Collections.Generic.IEnumerable{Snowflake.Scraping.ISeed},Snowflake.Scraping.ISeedRootContext)">
            <summary>
            Determines the seeds that REMAIN for traversal.
            </summary>
            <param name="seedsToFilter">The seeds of the specified type in the current job.</param>
            <param name="context">The root context of the current job.</param>
            <returns>A list of seeds NOT to cull.</returns>
        </member>
        <member name="T:Snowflake.Scraping.Extensibility.IScraper">
            <summary>
            A <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/> specifies a type of <see cref="T:Snowflake.Scraping.ISeed"/>
            and some restrictions on the seed, and uses the value of the seed to
            return a resultant tree of new seeds.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.IScraper.AttachPoint">
            <summary>
            Gets the seed node where the results of this scraper will attach to the
            scrape context tree.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.IScraper.TargetType">
            <summary>
            Gets the type of seed this <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/> will examine to produce
            new seeds.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.IScraper.Directives">
            <summary>
            Gets the list of directives or restrictions that must be fulfilled if this
            <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/> is to be run.
            </summary>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.IScraper.ScrapeAsync(Snowflake.Scraping.ISeed,System.Linq.ILookup{System.String,Snowflake.Scraping.SeedContent},System.Linq.ILookup{System.String,Snowflake.Scraping.SeedContent},System.Linq.ILookup{System.String,Snowflake.Scraping.SeedContent})">
            <summary>
            Once all <see cref="P:Snowflake.Scraping.Extensibility.IScraper.Directives"/> have been fulfilled, returns
            a new tree of seeds that are attached to the specified attach point on
            the job <see cref="T:Snowflake.Scraping.ISeedRootContext"/>.
            <para>
            While scraping must be an asynchronous action, there is no requirement that
            the actual processing must be asynchronous. You may not need to use
            async/await at all and return a seed tree as normal using
            SeedBuilder syntax.
            </para>
            </summary>
            <param name="target">An instance of the seed with the specified <see cref="P:Snowflake.Scraping.Extensibility.IScraper.TargetType"/>.</param>
            <param name="rootSeeds">Any seeds, keyed on their type, that must exist as children of the root as specified in <see cref="P:Snowflake.Scraping.Extensibility.IScraper.Directives"/>.</param>
            <param name="childSeeds">Any seeds, keyed on their type, that must exist as children of the target seed as specified in <see cref="P:Snowflake.Scraping.Extensibility.IScraper.Directives"/>.</param>
            <param name="siblingSeeds">Any seeds, keyed on their type, that must exist as siblings of the target seed as specified in <see cref="P:Snowflake.Scraping.Extensibility.IScraper.Directives"/></param>
            <returns>A tree of seeds based on information available in the given target. <seealso cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/></returns>
        </member>
        <member name="T:Snowflake.Scraping.Extensibility.IScraperDirective">
            <summary>
            Specifies a directive on a <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/> that determines
            when and what information it must have access to before it is run.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.IScraperDirective.Target">
            <summary>
            Gets the target of the directive. All seeds of this type are
            examined when evaluating the directive.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.IScraperDirective.Directive">
            <summary>
            Gets the directive action, whether or not this directive means to run
            the <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/> if the specified child type is available on
            the <see cref="P:Snowflake.Scraping.Extensibility.IScraperDirective.Target"/>, or whether not exclude and not run if the specified
            child type exists on the target.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.IScraperDirective.Type">
            <summary>
            Gets the child type to evaluate this directive on
            </summary>s
        </member>
        <member name="T:Snowflake.Scraping.Extensibility.ITraverser`1">
            <summary>
            A traverser traverses the resultant <see cref="T:Snowflake.Scraping.ISeedRootContext"/>,
            or rather sub-trees relative to a given seed in the context,
            and produces a list of <see cref="!:T"/> given the information available in the seed tree.
            </summary>
            <typeparam name="T">The type of record or object this traverser produces.</typeparam>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.ITraverser`1.Traverse(Snowflake.Scraping.ISeed,Snowflake.Scraping.ISeedRootContext)">
            <summary>
            Traverses the seed tree to yield objects of type <see cref="!:T"/>
            <para>
            While the full seed root context is given, it is best practice for traversers to
            treat the given relative root as the root of the entire seed tree rather than the true
            root of the context.
            </para>
            </summary>
            <param name="relativeRoot">The seed to begin traversing from.</param>
            <param name="context">The seed context within where the seeds can be traversed.</param>
            <returns>Objects based on values found in the tree.</returns>
        </member>
        <member name="T:Snowflake.Scraping.Extensibility.SeedTree">
            <summary>
            Used when building a seed tree, represents a <see cref="T:Snowflake.Scraping.SeedContent"/> with
            context-free parent/child relationships. This should never be used directly
            outside of the return value of an <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/>. There is
            no way to instantiate this class besides implicitly converting from
            an instance of <see cref="T:Snowflake.Scraping.SeedContent"/>. <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> does not
            implement <see cref="T:System.IEquatable`1"/>, and thus is not equatable.
            </summary>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTree.op_Implicit(Snowflake.Scraping.Extensibility.SeedTree)~Snowflake.Scraping.SeedContent">
            <summary>
            Implicitly coerces a <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> into
            a single <see cref="T:Snowflake.Scraping.SeedContent"/> without children.
            </summary>
            <param name="seedTree">The <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTree.op_Implicit(Snowflake.Scraping.SeedContent)~Snowflake.Scraping.Extensibility.SeedTree">
            <summary>
            Implicitly coerces a <see cref="T:Snowflake.Scraping.SeedContent"/> into
            a single <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> without children.
            </summary>
            <param name="seedContent">The <see cref="T:Snowflake.Scraping.SeedContent"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTree.op_Implicit(System.ValueTuple{System.String,System.String})~Snowflake.Scraping.Extensibility.SeedTree">
            <summary>
            Implicitly coerces a <see cref="T:Snowflake.Scraping.SeedContent"/> into
            a single <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> without children.
            </summary>
            <param name="seedContent">The <see cref="T:Snowflake.Scraping.SeedContent"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTree.op_Implicit(Snowflake.Scraping.Extensibility.SeedTree)~System.ValueTuple{System.String,System.String}">
            <summary>
            Implicitly coerces a <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> into
            a single <see cref="T:Snowflake.Scraping.SeedContent"/> without children.
            </summary>
            <param name="seedTree">The <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTree.op_Implicit(Snowflake.Scraping.Extensibility.SeedTree)~System.ValueTuple{System.ValueTuple{System.String,System.String},System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.SeedTree}}">
            <summary>
            Implicitly coerces a <see cref="!:ValueTuple&lt;SeedContent, IEnumerable&lt;SeedTree&gt;&gt;"/>
            into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/>
            </summary>
            <param name="seedTree">The <see cref="!:ValueTuple&lt;SeedContent, IEnumerable&lt;SeedTree&gt;&gt;"/> to convert.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTree.op_Implicit(Snowflake.Scraping.Extensibility.SeedTree)~System.ValueTuple{Snowflake.Scraping.SeedContent,System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.SeedTree}}">
            <summary>
            Implicitly coerces a <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/>
            into a <see cref="!:ValueTuple&lt;SeedContent, IEnumerable&lt;SeedTree&gt;&gt;"/>
            </summary>
            <param name="seedTree">The <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> to convert.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTree.op_Implicit(System.ValueTuple{Snowflake.Scraping.SeedContent,System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.SeedTree}})~Snowflake.Scraping.Extensibility.SeedTree">
            <summary>
            Implicitly coerces a <see cref="!:ValueTuple&lt;SeedContent, IEnumerable&lt;SeedTree&gt;&gt;"/>
            into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/>
            </summary>
            <param name="contentTuple">The <see cref="!:ValueTuple&lt;SeedContent, IEnumerable&lt;SeedTree&gt;&gt;"/> to convert.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTree.op_Implicit(System.ValueTuple{System.String,System.String,System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.SeedTree}})~Snowflake.Scraping.Extensibility.SeedTree">
            <summary>
            Implicit coerces a <see cref="!:ValueTuple&lt;String, String, IEnumerable&lt;SeedTree&gt;&gt;"/> into
            a <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/>
            </summary>
            <param name="contentTuple">The <see cref="!:ValueTuple&lt;String, String, IEnumerable&lt;SeedTree&gt;&gt;"/> to coerce.</param>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.SeedTree.Content">
            <summary>
            Gets the <see cref="T:Snowflake.Scraping.SeedContent"/> associated with this tree.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.Extensibility.SeedTree.Children">
            <summary>
            Gets the children of this <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/>
            </summary>
        </member>
        <member name="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable">
            <summary>
            Represents an awaitable that returns a <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/>.
            Required for SeedBuilder syntax and asynchronous scraping, but
            should never be used directly. There is no way to instantiate
            a <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/> apart from implicitly coercing a
            <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> or a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTreeAwaitable.op_Implicit(Snowflake.Scraping.SeedContent)~Snowflake.Scraping.Extensibility.SeedTreeAwaitable">
            <summary>
            Implicitly coerces a <see cref="T:Snowflake.Scraping.SeedContent"/> into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/>
            </summary>
            <param name="seedContent">The <see cref="T:Snowflake.Scraping.SeedContent"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTreeAwaitable.op_Implicit(Snowflake.Scraping.Extensibility.SeedTree)~Snowflake.Scraping.Extensibility.SeedTreeAwaitable">
            <summary>
            Implicitly coerces a <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/>
            </summary>
            <param name="seedContent">The <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTreeAwaitable.op_Implicit(System.ValueTuple{System.String,System.String})~Snowflake.Scraping.Extensibility.SeedTreeAwaitable">
            <summary>
            Implicitly coerces a <see cref="T:Snowflake.Scraping.SeedContent"/> into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/>
            </summary>
            <param name="seedContent">The <see cref="T:Snowflake.Scraping.SeedContent"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTreeAwaitable.op_Implicit(System.ValueTuple{Snowflake.Scraping.SeedContent,System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.SeedTree}})~Snowflake.Scraping.Extensibility.SeedTreeAwaitable">
            <summary>
            Implicitly coerces a <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/>
            </summary>
            <param name="seedContent">The <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTreeAwaitable.op_Implicit(System.ValueTuple{System.String,System.String,System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.SeedTree}})~Snowflake.Scraping.Extensibility.SeedTreeAwaitable">
            <summary>
            Implicitly coerces a <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/>
            </summary>
            <param name="seedContent">The <see cref="T:Snowflake.Scraping.Extensibility.SeedTree"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTreeAwaitable.op_Implicit(System.Threading.Tasks.Task{System.ValueTuple{System.String,System.String,System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.SeedTree}}})~Snowflake.Scraping.Extensibility.SeedTreeAwaitable">
            <summary>
            Implicitly coerces a <see cref="T:System.Threading.Tasks.Task`1"/> into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/>
            </summary>
            <param name="seedContent">The <see cref="T:System.Threading.Tasks.Task`1"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTreeAwaitable.op_Implicit(System.Threading.Tasks.Task{System.ValueTuple{System.String,System.String}})~Snowflake.Scraping.Extensibility.SeedTreeAwaitable">
            <summary>
            Implicitly coerces a <see cref="T:System.Threading.Tasks.Task`1"/> into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/>
            </summary>
            <param name="seedContent">The <see cref="T:System.Threading.Tasks.Task`1"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTreeAwaitable.op_Implicit(System.Threading.Tasks.Task{System.ValueTuple{Snowflake.Scraping.SeedContent,System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.SeedTree}}})~Snowflake.Scraping.Extensibility.SeedTreeAwaitable">
            <summary>
            Implicitly coerces a <see cref="T:System.Threading.Tasks.Task`1"/> into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/>
            </summary>
            <param name="seedContent">The <see cref="T:System.Threading.Tasks.Task`1"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTreeAwaitable.op_Implicit(System.Threading.Tasks.Task{Snowflake.Scraping.Extensibility.SeedTree})~Snowflake.Scraping.Extensibility.SeedTreeAwaitable">
            <summary>
            Implicitly coerces a <see cref="T:System.Threading.Tasks.Task`1"/> into a <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/>
            </summary>
            <param name="seedContent">The <see cref="T:System.Threading.Tasks.Task`1"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.Extensibility.SeedTreeAwaitable.GetAwaiter">
            <summary>
            Gets the awaiter for this <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/>.
            </summary>
            <returns>The awaiter for this <see cref="T:Snowflake.Scraping.Extensibility.SeedTreeAwaitable"/></returns>
        </member>
        <member name="T:Snowflake.Scraping.IScrapeEngine`1">
            <summary>
            A <see cref="T:Snowflake.Scraping.IScrapeEngine`1"/> encapsulates the management of multiple
            <see cref="T:Snowflake.Scraping.IScrapeJob"/> and traversal over the resultant tree to produce
            a single object of type <see cref="!:T"/>.
            </summary>
            <typeparam name="T">The resultant of this <see cref="T:Snowflake.Scraping.IScrapeEngine`1"/></typeparam>
        </member>
        <member name="M:Snowflake.Scraping.IScrapeEngine`1.CreateJob(System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.SeedTree},System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.IScraper},System.Collections.Generic.IEnumerable{Snowflake.Scraping.Extensibility.ICuller})">
            <summary>
            Creates a job and returns its GUID in the engine.
            A reference to the created job is held until the result is produced.
            </summary>
            <param name="scrapers">The list of scrapers to use wtih this job.</param>
            <param name="cullers">The list of cullers to use with this job</param>
            <param name="initialSeeds">ANy initial seeds to begin with this job.</param>
            <returns>The GUID of the job.</returns>
        </member>
        <member name="M:Snowflake.Scraping.IScrapeEngine`1.ProceedJob(System.Guid)">
            <summary>
            Continues the job with the given GUID and return whether or not there is more
            work to be done.
            </summary>
            <param name="jobGuid">The GUID of the job.</param>
            <returns>A boolean indicating whether or not there is more work to be done with the job.</returns>
        </member>
        <member name="M:Snowflake.Scraping.IScrapeEngine`1.ProceedJob(System.Guid,System.Collections.Generic.IEnumerable{Snowflake.Scraping.SeedContent})">
            <summary>
            Continues the job with the given GUID and return whether or not there is more
            work to be done.
            </summary>
            <param name="jobGuid">The GUID of the job.</param>
            <param name="initialSeeds">Seeds to add to the in-progress job.</param>
            <returns>A boolean indicating whether or not there is more work to be done with the job.</returns>
        </member>
        <member name="M:Snowflake.Scraping.IScrapeEngine`1.CullJob(System.Guid)">
            <summary>
            Culls the seeds of a ScrapeJob.
            </summary>
            <param name="jobGuid">The GUID of the job</param>
        </member>
        <member name="M:Snowflake.Scraping.IScrapeEngine`1.CullJob(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Removes the given seeds, then culls the seeds of a ScrapeJob.
            </summary>
            <param name="jobGuid">The GUID of the job.</param>
            <param name="manualCull">The list of seeds to cull.</param>
        </member>
        <member name="M:Snowflake.Scraping.IScrapeEngine`1.GetJobState(System.Guid)">
            <summary>
            Gets the current state of the seed tree of the context with the given job ID.
            </summary>
            <param name="jobGuid">The GUID of the job.</param>
            <returns>The list of seeds in the context of the given job.</returns>
        </member>
        <member name="M:Snowflake.Scraping.IScrapeEngine`1.Result(System.Guid)">
            <summary>
            Continues with the job until it is completed, return the result. and
            remove the job from the queue.
            </summary>
            <param name="jobGuid">The GUID of the job.</param>
            <returns>The result of the job.</returns>
        </member>
        <member name="T:Snowflake.Scraping.IScrapeJob">
            <summary>
            Represents a job to produce a seed tree that can be traversed to yield usable
            records or other metadata.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.IScrapeJob.Context">
            <summary>
            Gets the seed root context local to this job.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.IScrapeJob.Cullers">
            <summary>
            Gets the list of <see cref="T:Snowflake.Scraping.Extensibility.ICuller"/> that will be used to cull the resultant seed tree.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.IScrapeJob.JobGuid">
            <summary>
            Gets the unique ID identifying this job.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.IScrapeJob.Scrapers">
            <summary>
            Gets the list of <see cref="T:Snowflake.Scraping.Extensibility.IScraper"/> that will be used to produce the resultant seed tree.
            </summary>s
        </member>
        <member name="M:Snowflake.Scraping.IScrapeJob.Cull">
            <summary>
            Culls the seed tree with the given <see cref="P:Snowflake.Scraping.IScrapeJob.Cullers"/>.
            </summary>
        </member>
        <member name="M:Snowflake.Scraping.IScrapeJob.Cull(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Culls the given seeds before additionally culling the seed tree with the given <see cref="P:Snowflake.Scraping.IScrapeJob.Cullers"/>
            </summary>
            <param name="manualCull">The seeds to manually cull</param>
        </member>
        <member name="M:Snowflake.Scraping.IScrapeJob.Proceed">
            <summary>
            Proceed with populating the seed tree using the given <see cref="P:Snowflake.Scraping.IScrapeJob.Scrapers"/>.
            </summary>
            <returns>Whether or not all possible seeds have been added with the given <see cref="P:Snowflake.Scraping.IScrapeJob.Scrapers"/></returns>
        </member>
        <member name="M:Snowflake.Scraping.IScrapeJob.Proceed(System.Collections.Generic.IEnumerable{Snowflake.Scraping.SeedContent})">
            <summary>
            Proceed with populating the seed tree using the given <see cref="P:Snowflake.Scraping.IScrapeJob.Scrapers"/>.
            </summary>
            <param name="seedsToAdd">Adds seeds to the root of the tree before running scrapers.</param>
            <returns>Whether or not all possible seeds have been added with the given <see cref="P:Snowflake.Scraping.IScrapeJob.Scrapers"/></returns>
        </member>
        <member name="T:Snowflake.Scraping.ISeed">
            <summary>
            A seed is a unit of data with a type and a string value, with a unique
            ID and a parent ID. Within an <see cref="T:Snowflake.Scraping.ISeedRootContext"/>, a list of seeds
            form a tree structure that can be traversed to produce records and other
            resultant data from scraped metadata and media.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.ISeed.Guid">
            <summary>
            Gets the unique GUID of the seed.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.ISeed.Parent">
            <summary>
            Gets the unique GUID of this seeds parent.
            The relation between parent and child seeds exists only within
            a <see cref="T:Snowflake.Scraping.ISeedRootContext"/>.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.ISeed.Content">
            <summary>
            Gets the type and value content of the seed.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.ISeed.Source">
            <summary>
            Gets the source from which this seed's data was sourced from
            or created. By convention, if the data was sourced from
            external sources other than scrapers, the source should be
            the string "__client".
            </summary>
        </member>
        <member name="T:Snowflake.Scraping.ISeedRootContext">
            <summary>
            Represents the context in which <see cref="T:Snowflake.Scraping.ISeed"/> can have 
            parent-child relationships.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.ISeedRootContext.Item(System.Guid)">
            <summary>
            Returns the seed with the given GUID. If it does not exists, returns the root.
            </summary>
            <param name="seedGuid">The GUID of the seed.</param>
            <returns>The seed with the given GUID if it exists within the context, otherwise the root seed.</returns>
        </member>
        <member name="P:Snowflake.Scraping.ISeedRootContext.Root">
            <summary>
            Gets the root of the context where all seeds are attached tho
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.ISeedRootContext.SeedCollectionGuid">
            <summary>
            Gets a unique ID identifying this context. The <see cref="P:Snowflake.Scraping.ISeedRootContext.Root"/> will have a <see cref="P:Snowflake.Scraping.ISeed.Parent"/>
            value of <see cref="P:Snowflake.Scraping.ISeedRootContext.SeedCollectionGuid"/>
            </summary>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.GetAll">
            <summary>
            Gets all the seeds in this context, whether culled or unculled.
            </summary>
            <returns>All the seed in this context.</returns>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.GetUnculled">
            <summary>
            Gets eeds that have not been marked as culled in this context.
            </summary>
            <returns>All the seed in this context that have not been marked as culled.</returns>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.GetAllOfType(System.String)">
            <summary>
            Gets all the unculled seeds of the given type that exist in this context.
            </summary>
            <param name="type">The semantic type of the seed.</param>
            <returns>All seeds with the given type that exist in the context.</returns>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.GetChildren(Snowflake.Scraping.ISeed)">
            <summary>
            Gets all the children of the given seed relative to this context, not
            including the given seed.
            </summary>
            <param name="seed">The seed of which whose children are returned.</param>
            <returns>All the children of the given seed relative to this context.</returns>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.GetSiblings(Snowflake.Scraping.ISeed)">
            <summary>
            Gets all the siblings of the given seed relative to this context,
            not including the given seed.
            </summary>
            <param name="seed">The seed of which whose siblings are returned.</param>
            <returns>All the siblings of the given seed relative to this context.</returns>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.GetRootSeeds">
            <summary>
            Gets all the children of the root.
            </summary>
            <returns>All the children of the root.</returns>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.GetDescendants(Snowflake.Scraping.ISeed)">
            <summary>
            Gets all the descendants of a given seed.
            </summary>
            <param name="seed">The seed whose descendants are returned.</param>
            <returns>All the descendants of the given seed.</returns>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.Add(Snowflake.Scraping.SeedContent,Snowflake.Scraping.ISeed,System.String)">
            <summary>
            Adds a seed to the context.
            </summary>
            <param name="value">The seed content of the seed.</param>
            <param name="parent">The parent of the seed.</param>
            <param name="source">The source of the seed.</param>
            <returns>The newly created seed with the given value and a parent relative to this context.</returns>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.CullSeedTree(Snowflake.Scraping.ISeed)">
            <summary>
            Culls the given seed and all of its descendants.
            </summary>
            <param name="seed">The seed to cull.</param>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.Add(Snowflake.Scraping.ISeed)">
            <summary>
            Adds a seed directly to the context.
            </summary>
            <param name="seed">The seed to add to the context.</param>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.AddRange(System.Collections.Generic.IEnumerable{Snowflake.Scraping.ISeed})">
            <summary>
            Adds multiple seeds directly to the context. 
            </summary>
            <param name="seeds">The seeds to add directly to the context.</param>
        </member>
        <member name="M:Snowflake.Scraping.ISeedRootContext.AddRange(System.Collections.Generic.IEnumerable{System.ValueTuple{Snowflake.Scraping.SeedContent,Snowflake.Scraping.ISeed}},System.String)">
            <summary>
            Adds multiple seeds to the context.
            </summary>
            <param name="seeds">The values of the seeds to add.</param>
            <param name="source">The source of the seed.</param>
            <returns>The newly created seeds with the given value and a parent relative to this context.</returns>
        </member>
        <member name="T:Snowflake.Scraping.SeedContent">
            <summary>
            A <see cref="T:Snowflake.Scraping.SeedContent"/> represents
            a unit of scraped data with a semantic type and a value.
            Two <see cref="T:Snowflake.Scraping.SeedContent"/> with the same type and value are considered equal.
            </summary>
        </member>
        <member name="F:Snowflake.Scraping.SeedContent.RootSeedType">
            <summary>
            By convention, any non root seeds must be a child of the root seed, which
            has a type __root.
            </summary>
        </member>
        <member name="F:Snowflake.Scraping.SeedContent.NullSeedType">
            <summary>
            Represents a null value seedcontent.
            </summary>
        </member>
        <member name="M:Snowflake.Scraping.SeedContent.op_Implicit(Snowflake.Scraping.SeedContent)~System.ValueTuple{System.String,System.String}">
            <summary>
            A <see cref="T:Snowflake.Scraping.SeedContent"/> is polymorphically equivalent to a
            <see cref="T:System.ValueTuple`2"/>
            </summary>
            <param name="seedContent">The <see cref="T:Snowflake.Scraping.SeedContent"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.SeedContent.op_Implicit(System.ValueTuple{System.String,System.String})~Snowflake.Scraping.SeedContent">
            <summary>
            A <see cref="T:Snowflake.Scraping.SeedContent"/> is polymorphically equivalent to a
            <see cref="T:System.ValueTuple`2"/>
            </summary>
            <param name="contentTuple">The <see cref="T:System.ValueTuple`2"/> to coerce.</param>
        </member>
        <member name="M:Snowflake.Scraping.SeedContent.op_Equality(Snowflake.Scraping.SeedContent,Snowflake.Scraping.SeedContent)">
            <summary>
            Determines if two <see cref="T:Snowflake.Scraping.SeedContent"/> are equal.
            </summary>
            <param name="x">The  <see cref="T:Snowflake.Scraping.SeedContent"/> on the left side of the operator</param>
            <param name="y">The  <see cref="T:Snowflake.Scraping.SeedContent"/> on the right side of the operator</param>
            <returns>If the two<see cref="T:Snowflake.Scraping.SeedContent"/> are equal.</returns>
        </member>
        <member name="M:Snowflake.Scraping.SeedContent.op_Inequality(Snowflake.Scraping.SeedContent,Snowflake.Scraping.SeedContent)">
            <summary>
            Determines if two <see cref="T:Snowflake.Scraping.SeedContent"/> are not equal.
            </summary>
            <param name="x">The  <see cref="T:Snowflake.Scraping.SeedContent"/> on the left side of the operator</param>
            <param name="y">The  <see cref="T:Snowflake.Scraping.SeedContent"/> on the right side of the operator</param>
            <returns>If the two<see cref="T:Snowflake.Scraping.SeedContent"/> are not equal.</returns>
        </member>
        <member name="P:Snowflake.Scraping.SeedContent.Type">
            <summary>
            Gets the semantic type of the content.
            </summary>
        </member>
        <member name="P:Snowflake.Scraping.SeedContent.Value">
            <summary>
            Gets the string value of the content.
            </summary>
        </member>
        <member name="M:Snowflake.Scraping.SeedContent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Snowflake.Scraping.SeedContent"/> struct.
            </summary>
            <param name="type">The semantic type of the content.</param>
            <param name="value">The value of the content.</param>
        </member>
        <member name="M:Snowflake.Scraping.SeedContent.Equals(Snowflake.Scraping.SeedContent)">
            <summary>
            Determines if this <see cref="T:Snowflake.Scraping.SeedContent"/> is equal to another.
            </summary>
            <param name="other">The other <see cref="T:Snowflake.Scraping.SeedContent"/></param>
            <returns>if the two objects are equal.</returns>
        </member>
        <member name="M:Snowflake.Scraping.SeedContent.Equals(System.Object)">
            <summary>
            Determines if this <see cref="T:Snowflake.Scraping.SeedContent"/> is equal to another object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>if the two objects are equal.</returns>
        </member>
        <member name="M:Snowflake.Scraping.SeedContent.GetHashCode">
            <summary>
            Gets the hashcode of this SeedContent.
            </summary>
            <returns>The hashcode of this SeedContent.</returns>
        </member>
        <member name="T:Snowflake.Services.IContentDirectoryProvider">
            <summary>
            Provides the application content directory.
            </summary>
        </member>
        <member name="P:Snowflake.Services.IContentDirectoryProvider.ApplicationData">
            <summary>
            Gets the application content directory.
            </summary>
        </member>
        <member name="T:Snowflake.Services.ILogProvider">
            <summary>
            Provides logging services
            </summary>
        </member>
        <member name="T:Snowflake.Services.IPluginManager">
            <summary>
            The IPluginManager manages all plugins.
            </summary>
        </member>
        <member name="M:Snowflake.Services.IPluginManager.GetProvision``1(Snowflake.Loader.IModule)">
            <summary>
            Provisions a <see cref="T:Snowflake.Extensibility.Provisioning.IProvisionedPlugin"/> relative to the given module for initialization.
            </summary>
            <typeparam name="T">The Type of the plugin</typeparam>
            <param name="module">The module the plugin is loaded from</param>
            <returns>A provision used to initialize an <see cref="T:Snowflake.Extensibility.Provisioning.IProvisionedPlugin"/></returns>
        </member>
        <member name="M:Snowflake.Services.IPluginManager.Register``1(``0)">
            <summary>
            Registers a plugin with the plugin manager.
            </summary>
            <typeparam name="T">
            The plugin type category to register under.
            Examples include <see cref="!:IEmulatorAdapter"/>
            </typeparam>
            <param name="plugin">The plugin instance</param>
        </member>
        <member name="M:Snowflake.Services.IPluginManager.Get``1">
            <summary>
            Gets all plugins registered under the type category
            </summary>
            <typeparam name="T">
            The plugin type category to register under.
            Examples include <see cref="!:IEmulatorAdapter"/>
            </typeparam>
            <returns>All plugins registered under a specific category.</returns>
        </member>
        <member name="M:Snowflake.Services.IPluginManager.GetCollection``1">
            <summary>
            Gets all plugins registered under the type category as a plugin collection.
            </summary>
            <typeparam name="T">
            The plugin type category to register under.
            Examples include <see cref="!:IEmulatorAdapter"/>
            </typeparam>
            <returns>All plugins registered under a specific category.</returns>
        </member>
        <member name="M:Snowflake.Services.IPluginManager.Get``1(System.String)">
            <summary>
            Gets a specific plugin registered under a given type category
            </summary>
            <typeparam name="T">
            The plugin type category to register under.
            Examples include <see cref="!:IEmulatorAdapter"/>
            </typeparam>
            <param name="pluginName">The name of the plugin.</param>
            <returns>The given plugin if it exists, null if it does not.</returns>
        </member>
        <member name="M:Snowflake.Services.IPluginManager.Get(System.String)">
            <summary>
            Gets a specific provisioned plugin
            </summary>
            <param name="pluginName">The name of the plugin.</param>
            <returns>The given plugin if it exists, null if it does not.</returns>
        </member>
        <member name="M:Snowflake.Services.IPluginManager.IsRegistered``1(System.String)">
            <summary>
            Checks if a given plugin under a type category has been loaded into the plugin manager.
            </summary>
            <typeparam name="T">
            The plugin type category to register under.
            Examples include <see cref="!:IEmulatorAdapter"/>
            </typeparam>
            <param name="pluginName">The name of the plugin.</param>
            <returns>True if the plugin has been registered.</returns>
        </member>
        <member name="M:Snowflake.Services.IPluginManager.IsRegistered(System.String)">
            <summary>
            Checks if a given plugin has been loaded into the plugin manager.
            </summary>
            <param name="pluginName">The name of the plugin.</param>
            <returns>True if the plugin has been registered.</returns>
        </member>
        <member name="T:Snowflake.Services.IServiceContainer">
            <summary>
            The core frontend service that handles all the functions of the frontend core.
            </summary>
        </member>
        <member name="P:Snowflake.Services.IServiceContainer.AppDataDirectory">
            <summary>
            Gets the directory to store appdata in this core service
            </summary>
        </member>
        <member name="M:Snowflake.Services.IServiceContainer.RegisterService``1(``0)">
            <summary>
            Register a service with this coreservice
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceInstance"></param>
        </member>
        <member name="M:Snowflake.Services.IServiceContainer.AvailableServices">
            <summary>
            Get a list of registered services
            </summary>
            <returns></returns>
        </member>
        <member name="M:Snowflake.Services.IServiceContainer.Get``1">
            <summary>
            Get a service.
            The <see cref="T:Snowflake.Loader.IModuleEnumerator"/> service will always be available.
            </summary>
            <typeparam name="T">The type of service.</typeparam>
            <returns>The service instance</returns>
        </member>
        <member name="T:Snowflake.Services.IServiceEnumerator">
            <summary>
            Enumerates all available services.
            </summary>
        </member>
        <member name="P:Snowflake.Services.IServiceEnumerator.Services">
            <summary>
            Gets the type names of all available services.
            </summary>
        </member>
        <member name="T:Snowflake.Services.IServiceRegistrationProvider">
            <summary>
            Provides facilities to register a service.
            <para>
            When registering a service, your service must implement an interface in an assembly
            outside of the plugin composable.
            Otherwise, your service will never be accessible by any consumer.
            </para>
            </summary>
        </member>
        <member name="M:Snowflake.Services.IServiceRegistrationProvider.RegisterService``1(``0)">
            <summary>
            Registers a service with the current service singleton
            </summary>
            <typeparam name="T">The type of service to register</typeparam>
            <param name="serviceInstance">The instance of the service</param>
        </member>
        <member name="T:Snowflake.Services.ISqliteDatabaseProvider">
            <summary>
            Providers access to creation of databases
            </summary>
        </member>
        <member name="M:Snowflake.Services.ISqliteDatabaseProvider.CreateDatabase(System.String)">
            <summary>
            Creates a database under the root universe.
            </summary>
            <param name="databaseName">The name of the database</param>
            <returns>A SQLite database instance</returns>
        </member>
        <member name="M:Snowflake.Services.ISqliteDatabaseProvider.CreateDatabase(System.String,System.String)">
            <summary>
            Creates a database under the specified universe.
            </summary>
            <param name="universe">The universe to create the database under</param>
            <param name="databaseName">The name of the database</param>
            <returns>A SQLite database instance</returns>
        </member>
        <member name="T:Snowflake.Services.IStoneProvider">
            <summary>
            Provides Stone platform and controller layout data
            </summary>
        </member>
        <member name="P:Snowflake.Services.IStoneProvider.Platforms">
            <summary>
            Gets the list of platforms loaded for this core service
            </summary>
        </member>
        <member name="P:Snowflake.Services.IStoneProvider.Controllers">
            <summary>
            Gets the list of controllers loaded for this core service
            </summary>
        </member>
        <member name="P:Snowflake.Services.IStoneProvider.StoneVersion">
            <summary>
            Gets the version of stone definitions loaded
            </summary>
        </member>
        <member name="T:Snowflake.Services.IUserInterface">
            <summary>
            Represents a user interface that is started by the Snowflake shell.
            There can only be one interface at a time.
            </summary>
        </member>
        <member name="M:Snowflake.Services.IUserInterface.StartUserInterface(System.String[])">
            <summary>
            Starts the user interface
            </summary>
        </member>
        <member name="M:Snowflake.Services.IUserInterface.StopUserInterface(System.String[])">
            <summary>
            Stops the user interface
            </summary>
        </member>
        <member name="T:Snowflake.Shiragame.IRomInfo">
            <summary>
            Represents a shiragame hashed info
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.IRomInfo.PlatformId">
            <summary>
            Gets the Stone platform ID
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.IRomInfo.CRC32">
            <summary>
            Gets the canonical CRC32 from the dat file
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.IRomInfo.MD5">
            <summary>
            Gets the canonical MD5 from the dat file
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.IRomInfo.SHA1">
            <summary>
            Gets the canonical SHA1 from the dat file
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.IRomInfo.MimeType">
            <summary>
            Gets the mimetype of the file
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.IRomInfo.FileName">
            <summary>
            Gets the canonical filename from the dat file
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.IRomInfo.Region">
            <summary>
            Gets the ISO 3166-1 alpha-2 region code for this rom
            </summary>
        </member>
        <member name="T:Snowflake.Shiragame.ISerialInfo">
            <summary>
            Represents a datum matching a serial number to a game name
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.ISerialInfo.PlatformId">
            <summary>
            Gets the Stone platform ID
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.ISerialInfo.Title">
            <summary>
            Gets the canonical game name
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.ISerialInfo.Region">
            <summary>
            Gets the region code
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.ISerialInfo.Serial">
            <summary>
            Gets the game serials
            </summary>
        </member>
        <member name="T:Snowflake.Shiragame.IShiragameProvider">
            <summary>
            Represents a Shiragame information database
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.IShiragameProvider.StoneVersion">
            <summary>
            Gets the version of Stone used in generating the database
            </summary>
        </member>
        <member name="P:Snowflake.Shiragame.IShiragameProvider.DatabaseVersion">
            <summary>
            Gets the database version
            </summary>
        </member>
        <member name="M:Snowflake.Shiragame.IShiragameProvider.IsMameRom(System.String)">
            <summary>
            Checks if the file is a mame ROM
            </summary>
            <param name="mameRom">The name of the file, including .zip extension</param>
            <returns>Whether the filename matches with a known mame dump</returns>
        </member>
        <member name="M:Snowflake.Shiragame.IShiragameProvider.GetFromCrc32(System.String)">
            <summary>
            Get ROM information from the CRC32 string of a file.
            CRC32 has conflicts, use MD5 or SHA1 if possible.
            </summary>
            <param name="crc32">The CRC32 of the file</param>
            <returns>The rom information</returns>
        </member>
        <member name="M:Snowflake.Shiragame.IShiragameProvider.GetFromMd5(System.String)">
            <summary>
            Get ROM informatiom from the MD5 of a file
            </summary>
            <param name="md5">The MD5 of the file</param>
            <returns>The rom information</returns>
        </member>
        <member name="M:Snowflake.Shiragame.IShiragameProvider.GetFromSha1(System.String)">
            <summary>
            Get ROM information from the SHA1 of a file
            </summary>
            <param name="sha1">The SHA1 of the file</param>
            <returns>The rom information</returns>
        </member>
        <member name="M:Snowflake.Shiragame.IShiragameProvider.GetFromSerial(System.String,System.String)">
            <summary>
            Gets serial information, given the known platform ID and a known serial.
            Platform ID must be known, as serials conflict within platforms.
            </summary>
            <param name="platformId">The Stone Platform ID for the serial</param>
            <param name="serial">The serial from the file</param>
            <returns>The serial information</returns>
        </member>
    </members>
</doc>
